# -*- coding: utf-8 -*-
# Persona 5 Strikers Base (1.0.0)
import sys, os
import getopt
from os.path import exists
import binascii
import struct
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import functools
import codecs
import re


class PersonaApp(QMainWindow):

    def __init__(self):
        super().__init__()
        global dir
        dir = "img/"
        self.title = "Persona 5 Strikers Save Editor"
        self.setWindowIcon(QIcon(dir + 'icon.png'))
        width = 625
        height = 240
        qtRectangle = self.frameGeometry()
        centerPoint = QDesktopWidget().availableGeometry().center()
        qtRectangle.moveCenter(centerPoint)
        self.move(qtRectangle.topLeft())
        self.width = width
        self.height = height
        self.setFixedSize(width, height)
        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)

        #########################################
        #				MENUBAR					#
        #########################################

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        helpMenu = menubar.addMenu('&Help')

        fileMenu_open = QAction(QIcon(dir + 'open_file.png'), '&Open', self)
        fileMenu_open.setShortcut('Ctrl+O')
        fileMenu_open.setStatusTip('Open File')
        fileMenu_open.triggered.connect(self.openfile)

        fileMenu_save = QAction(QIcon(dir + 'save_file.png'), '&Save', self)
        fileMenu_save.setShortcut('Ctrl+S')
        fileMenu_save.setStatusTip('Save File')
        fileMenu_save.triggered.connect(self.savefile)

        fileMenu_exit = QAction(QIcon(dir + 'exit.png'), '&Exit', self)
        fileMenu_exit.setShortcut('Ctrl+Q')
        fileMenu_exit.setStatusTip('Exit')
        fileMenu_exit.triggered.connect(qApp.quit)

        helpMenu_usage = QAction(QIcon(dir + 'help.png'), '&How to use', self)
        helpMenu_usage.setShortcut('Ctrl+H')
        helpMenu_usage.setStatusTip('How to use')
        helpMenu_usage.triggered.connect(self.show_howto)

        helpMenu_about = QAction(QIcon(dir + 'about.png'), '&About', self)
        helpMenu_about.setStatusTip('About')
        helpMenu_about.triggered.connect(self.show_about)

        fileMenu.addAction(fileMenu_open)
        fileMenu.addAction(fileMenu_save)
        fileMenu.addAction(fileMenu_exit)
        helpMenu.addAction(helpMenu_usage)
        helpMenu.addAction(helpMenu_about)

        #########################################
        #				TOOLBAR					#
        #########################################

        toolbar = self.addToolBar("File")
        toolbar.setMovable(False)

        toolbar_openfile = QAction(QIcon(dir + "open_file.png"), "Open File", self)
        toolbar_openfile.triggered.connect(self.openfile)

        toolbar_savefile = QAction(QIcon(dir + "save_file.png"), "Save File", self)
        toolbar_savefile.triggered.connect(self.savefile)

        toolbar.addAction(toolbar_openfile)
        toolbar.addAction(toolbar_savefile)

        #########################################
        #				TABS					#
        #########################################

        centralWidget = QWidget(self)
        centralWidgetLayout = QVBoxLayout(centralWidget)
        centralWidget.setLayout(centralWidgetLayout)

        tabContainer = QTabWidget(centralWidget)

        tab1 = QWidget(tabContainer)
        tab2 = QWidget(tabContainer)
        tab3 = QWidget(tabContainer)
        tab4 = QWidget(tabContainer)
        tab5 = QWidget(tabContainer)
        tab6 = QWidget(tabContainer)
        tab7 = QWidget(tabContainer)
        tab8 = QWidget(tabContainer)
        tab9 = QWidget(tabContainer)

        tab1layout = QVBoxLayout(tab1)

        tabContainer.setLayout(tab1layout)

        tabContainer.addTab(tab1, "Save 1")
        tabContainer.addTab(tab2, "Save 2")
        tabContainer.addTab(tab3, "Save 3")
        tabContainer.addTab(tab4, "Save 4")
        tabContainer.addTab(tab5, "Save 5")
        tabContainer.addTab(tab6, "Save 6")
        tabContainer.addTab(tab7, "Save 7")
        tabContainer.addTab(tab8, "Save 8")
        tabContainer.addTab(tab9, "Save 9")
        tabContainer.setCurrentIndex(0)
        centralWidgetLayout.addWidget(tabContainer)
        self.setCentralWidget(centralWidget)

        #########################################
        #               Save 1                  #
        #########################################

        btn_character = QPushButton('Character', tab1)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_1"))

        btn_mppb = QPushButton('M/PP/B', tab1)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_1"))

        btn_weapon = QPushButton('Weapons', tab1)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_1"))

        btn_armor = QPushButton('Armors', tab1)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_1"))

        btn_accessories = QPushButton('Accessories', tab1)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_1"))

        btn_consumables = QPushButton('Consumables', tab1)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_1"))

        btn_recipes = QPushButton('Recipes', tab1)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_1"))

        btn_cash = QPushButton('Cash Mats.', tab1)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_1"))

        btn_skill = QPushButton('Skill Cards', tab1)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_1"))

        btn_persona = QPushButton('Persona', tab1)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_1"))

        #########################################
        #               Save 2                  #
        #########################################

        btn_character = QPushButton('Character', tab2)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_2"))

        btn_mppb = QPushButton('M/PP/B', tab2)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_2"))

        btn_weapon = QPushButton('Weapons', tab2)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_2"))

        btn_armor = QPushButton('Armors', tab2)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_2"))

        btn_accessories = QPushButton('Accessories', tab2)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_2"))

        btn_consumables = QPushButton('Consumables', tab2)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_2"))

        btn_recipes = QPushButton('Recipes', tab2)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_2"))

        btn_cash = QPushButton('Cash Mats.', tab2)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_2"))

        btn_skill = QPushButton('Skill Cards', tab2)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_2"))

        btn_persona = QPushButton('Persona', tab2)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_2"))

        #########################################
        #               Save 3                  #
        #########################################

        btn_character = QPushButton('Character', tab3)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_3"))

        btn_mppb = QPushButton('M/PP/B', tab3)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_3"))

        btn_weapon = QPushButton('Weapons', tab3)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_3"))

        btn_armor = QPushButton('Armors', tab3)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_3"))

        btn_accessories = QPushButton('Accessories', tab3)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_3"))

        btn_consumables = QPushButton('Consumables', tab3)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_3"))

        btn_recipes = QPushButton('Recipes', tab3)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_3"))

        btn_cash = QPushButton('Cash Mats.', tab3)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_3"))

        btn_skill = QPushButton('Skill Cards', tab3)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_3"))

        btn_persona = QPushButton('Persona', tab3)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_3"))

        #########################################
        #               Save 4                  #
        #########################################

        btn_character = QPushButton('Character', tab4)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_4"))

        btn_mppb = QPushButton('M/PP/B', tab4)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_4"))

        btn_weapon = QPushButton('Weapons', tab4)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_4"))

        btn_armor = QPushButton('Armors', tab4)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_4"))

        btn_accessories = QPushButton('Accessories', tab4)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_4"))

        btn_consumables = QPushButton('Consumables', tab4)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_4"))

        btn_recipes = QPushButton('Recipes', tab4)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_4"))

        btn_cash = QPushButton('Cash Mats.', tab4)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_4"))

        btn_skill = QPushButton('Skill Cards', tab4)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_4"))

        btn_persona = QPushButton('Persona', tab4)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_4"))

        #########################################
        #               Save 5                  #
        #########################################

        btn_character = QPushButton('Character', tab5)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_5"))

        btn_mppb = QPushButton('M/PP/B', tab5)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_5"))

        btn_weapon = QPushButton('Weapons', tab5)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_5"))

        btn_armor = QPushButton('Armors', tab5)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_5"))

        btn_accessories = QPushButton('Accessories', tab5)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_5"))

        btn_consumables = QPushButton('Consumables', tab5)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_5"))

        btn_recipes = QPushButton('Recipes', tab5)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_5"))

        btn_cash = QPushButton('Cash Mats.', tab5)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_5"))

        btn_skill = QPushButton('Skill Cards', tab5)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_5"))

        btn_persona = QPushButton('Persona', tab5)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_5"))

        #########################################
        #               Save 6                  #
        #########################################

        btn_character = QPushButton('Character', tab6)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_6"))

        btn_mppb = QPushButton('M/PP/B', tab6)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_6"))

        btn_weapon = QPushButton('Weapons', tab6)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_6"))

        btn_armor = QPushButton('Armors', tab6)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_6"))

        btn_accessories = QPushButton('Accessories', tab6)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_6"))

        btn_consumables = QPushButton('Consumables', tab6)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_6"))

        btn_recipes = QPushButton('Recipes', tab6)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_6"))

        btn_cash = QPushButton('Cash Mats.', tab6)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_6"))

        btn_skill = QPushButton('Skill Cards', tab6)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_6"))

        btn_persona = QPushButton('Persona', tab6)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_6"))

        #########################################
        #               Save 7                  #
        #########################################

        btn_character = QPushButton('Character', tab7)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_7"))

        btn_mppb = QPushButton('M/PP/B', tab7)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_7"))

        btn_weapon = QPushButton('Weapons', tab7)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_7"))

        btn_armor = QPushButton('Armors', tab7)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_7"))

        btn_accessories = QPushButton('Accessories', tab7)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_7"))

        btn_consumables = QPushButton('Consumables', tab7)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_7"))

        btn_recipes = QPushButton('Recipes', tab7)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_7"))

        btn_cash = QPushButton('Cash Mats.', tab7)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_7"))

        btn_skill = QPushButton('Skill Cards', tab7)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_7"))

        btn_persona = QPushButton('Persona', tab7)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_7"))

        #########################################
        #               Save 8                  #
        #########################################

        btn_character = QPushButton('Character', tab8)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_8"))

        btn_mppb = QPushButton('M/PP/B', tab8)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_8"))

        btn_weapon = QPushButton('Weapons', tab8)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_8"))

        btn_armor = QPushButton('Armors', tab8)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_8"))

        btn_accessories = QPushButton('Accessories', tab8)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_8"))

        btn_consumables = QPushButton('Consumables', tab8)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_8"))

        btn_recipes = QPushButton('Recipes', tab8)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_8"))

        btn_cash = QPushButton('Cash Mats.', tab8)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_8"))

        btn_skill = QPushButton('Skill Cards', tab8)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_8"))

        btn_persona = QPushButton('Persona', tab8)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_8"))

        #########################################
        #               Save 9                  #
        #########################################

        btn_character = QPushButton('Character', tab9)
        btn_character.setToolTip(f"View or change Protagonist's Name")
        btn_character.move(35, 30)
        btn_character.clicked.connect(lambda: self.show_statwindow("Character_9"))

        btn_mppb = QPushButton('M/PP/B', tab9)
        btn_mppb.setToolTip('Money, Persona Points, Bonds amount')
        btn_mppb.move(135, 30)
        btn_mppb.clicked.connect(lambda: self.show_statwindow("M/PP/B_9"))

        btn_weapon = QPushButton('Weapons', tab9)
        btn_weapon.setToolTip('Weapons')
        btn_weapon.move(235, 30)
        btn_weapon.clicked.connect(lambda: self.show_statwindow("Weapons_9"))

        btn_armor = QPushButton('Armors', tab9)
        btn_armor.setToolTip('Armors')
        btn_armor.move(335, 30)
        btn_armor.clicked.connect(lambda: self.show_statwindow("Armors_9"))

        btn_accessories = QPushButton('Accessories', tab9)
        btn_accessories.setToolTip('Accessories')
        btn_accessories.move(435, 30)
        btn_accessories.clicked.connect(lambda: self.show_statwindow("Accessories_9"))

        btn_consumables = QPushButton('Consumables', tab9)
        btn_consumables.setToolTip('Consumables')
        btn_consumables.move(35, 90)
        btn_consumables.clicked.connect(lambda: self.show_statwindow("Consumables_9"))

        btn_recipes = QPushButton('Recipes', tab9)
        btn_recipes.setToolTip('Recipes')
        btn_recipes.move(135, 90)
        btn_recipes.clicked.connect(lambda: self.show_statwindow("Recipes_9"))

        btn_cash = QPushButton('Cash Mats.', tab9)
        btn_cash.setToolTip('Cash Materials')
        btn_cash.move(235, 90)
        btn_cash.clicked.connect(lambda: self.show_statwindow("Cash Materials_9"))

        btn_skill = QPushButton('Skill Cards', tab9)
        btn_skill.setToolTip('Skill Cards')
        btn_skill.move(335, 90)
        btn_skill.clicked.connect(lambda: self.show_statwindow("Skill Cards_9"))

        btn_persona = QPushButton('Persona', tab9)
        btn_persona.setToolTip('Persona')
        btn_persona.move(435, 90)
        btn_persona.clicked.connect(lambda: self.show_statwindow("Persona_9"))

        self.show()

    # Open File
    @pyqtSlot()
    def openfile(self):
        filename = QFileDialog.getOpenFileName(self, 'Open File', 'savedata')
        if filename[0] is '':
            return
        #if (os.path.getsize(filename[0]) == 6291456):  # Filesize check
        if (os.path.getsize(filename[0]) >= 1048576):  # Filesize check
            f = open(filename[0], "rb").read()
            global h
            h = (binascii.hexlify(f))
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Not a valid savefile!")
            msg.setWindowTitle("Not valid")
            msg.setWindowIcon(QIcon(dir + 'icon.ico'))
            msg.exec_()

    # Save File
    def savefile(self):
        if self.checkforsave():
            savedir = QFileDialog.getSaveFileName(self, 'Save File', 'savedata')
            if savedir[0] is '':
                return
            file = open(savedir[0], "wb")
            file.write(binascii.unhexlify(h))
            file.close()

    # Check if a savefile is open
    def checkforsave(self):
        if "h" in globals():
            return True
        else:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Open a <b>Save File</b> first!")
            msg.setWindowTitle("No Save File")
            msg.setWindowIcon(QIcon(dir + 'icon.ico'))
            msg.exec_()
            return False

    # How to
    def show_howto(self):
        global dir
        howto = QDialog(None, Qt.WindowSystemMenuHint | Qt.WindowTitleHint | Qt.WindowCloseButtonHint)
        howto.setWindowTitle("How To Use")
        howto.setWindowIcon(QIcon(dir + 'help.png'))
        width = 400
        height = 200
        howto.resize(width, height)
        howto.setFixedSize(width, height)
        howto.setWindowModality(Qt.ApplicationModal)

        l1 = QLabel()
        l2 = QLabel()

        l1.setText("<center><b>HOW TO USE</b><br><br></center>")
        l2.setText(
            "<ul><li>1. Dump your save with your preferred save manager</li><li>2. Open your save (savedata)</li><li>3. Edit stuff to your liking</li><li>4. Save it (Ctrl + S)</li><li>5. Overwrite your save with the one you just edited</li><li>6. That's it!</li></ul>")

        l1.setAlignment(Qt.AlignLeft)
        l2.setAlignment(Qt.AlignLeft)

        vbox = QVBoxLayout()
        vbox.addWidget(l1)
        vbox.addWidget(l2)
        vbox.addStretch()
        howto.setLayout(vbox)
        howto.exec_()

    # About
    def show_about(self):
        global dir
        about = QDialog(None, Qt.WindowSystemMenuHint | Qt.WindowTitleHint | Qt.WindowCloseButtonHint)
        about.setWindowTitle("About")
        about.setWindowIcon(QIcon(dir + 'about.png'))
        width = 450
        height = 350
        about.resize(width, height)
        about.setFixedSize(width, height)
        about.setWindowModality(Qt.ApplicationModal)

        l1 = QLabel()
        l1.setText(
            "<b>THIS SOFTWARE MUST NOT BE SOLD,NEITHER ALONE NOR AS PART OF A BUNDLE. IF YOU PAID FOR THIS SOFTWARE OR RECEIVED IT AS PART OF A BUNDLE FOLLOWING PAYMENT,<br>YOU HAVE BEEN SCAMMED AND SHOULD DEMAND YOUR MONEY BACK IMMEDIATELY.</b>")
        l1.setAlignment(Qt.AlignCenter)
        l1.setWordWrap(True)
        l2 = QLabel()
        l2.setText("Created by: <a href=\"https://github.com/Amuyea-gbatemp\"><b>Amuyea-gbatemp</b></a>")
        l2.setOpenExternalLinks(True)
        l2.setAlignment(Qt.AlignLeft)
        l3 = QLabel()
        l3.setText("Advices/Helpful: Pj1980/Skiller & PS4 Save Wizard JP/EN<br>Reference on Python Save Editor: <a href=\"https://github.com/CapitanRetraso/Ultimate-Smasher\"><b>Capitán Retraso</b></a>")
        l3.setOpenExternalLinks(True)
        l3.setAlignment(Qt.AlignLeft)
        l4 = QLabel()
        l4.setText("<a href=\"https://github.com/Amuyea-gbatemp/Persona-5-Strikers-Scramble-Save-Editor/issues\"><b>Report a problem</b></a>")
        l4.setOpenExternalLinks(True)
        l4.setAlignment(Qt.AlignRight)
        l5 = QLabel()
        l5.setText(
            "<b>DISCLAIMER</b><br> This tool can damage your savegame or cause a ban if not used correctly.<br><b>By using it you are responsible for any data lost or ban.</b><br>Be careful when editing your savegame and always keep a clean backup.")
        l5.setAlignment(Qt.AlignCenter)
        l5.setWordWrap(True)

        vbox = QVBoxLayout()
        vbox.addWidget(l1)
        vbox.addStretch()
        vbox.addWidget(l5)
        vbox.addStretch()
        vbox.addWidget(l2)
        vbox.addWidget(l3)
        vbox.addWidget(l4)
        about.setLayout(vbox)

        about.exec_()

    # Name & Value
    def show_statwindow(self, category):
        if self.checkforsave():
            statwindow = QDialog(None, Qt.WindowSystemMenuHint | Qt.WindowTitleHint | Qt.WindowCloseButtonHint)
            statwindow.setWindowTitle("Stats - " + category)
            statwindow.setWindowIcon(QIcon(dir + 'icon.ico'))
            width = 550
            height = 400
            statwindow.resize(width, height)
            statwindow.setFixedSize(width, height)
            self.layout = QVBoxLayout()

            #########################################
            #             Names List                #
            #########################################
            characterList = ["First Name", "Last Name"]
            mppbList = ["Money", "Persona Points", "Bonds"]
            weaponList = ["Rebel Knife", "Blizz Dagger", "Silver Dagger", "Kukri", "Athame", "Igniter", "Skinning Knife", "Kopis", "Arsene's Cane S", "Killing Scalpel", "Quality Kopis", "Kris Dagger", "Parrying Dagger", "Machete", "Pro Parrying Dagger", "Misericorde", "Paradise Lost S", "Cocytus", "Normal Rod", "Mace", "Hell Slugger", "Heavy Steel Pipe", "Battle Hammer", "Iron Pipe", "Heavy Mace", "Spike Rod", "Bush Hammer", "Demon Pipe", "Big Sleep Stick", "Dragon God Pole", "Grand Presser", "Mjolnir S", "Ruyi Jingu Bang S", "Super Megaton Rod", "Ukonvasara", "Bandit Sword", "Falchion", "Ryozanpaku Sword", "Sonic Blade", "Scimitar", "Talwar", "Sleeper Blade", "Shamshir", "Headhunter Ladle S", "Resting Sword", "Chief's Cutlass", "Damascus Sword", "Heavy Saber", "God Saber", "Bright Sword", "Answerer", "Cosmic Sword S", "Eckesachs", "Leather Whip", "Heat Whip", "Fundo-Kusari", "Dominatrix Whip", "Skin Ripper", "Goat Leather Whip", "Warrior Whip", "Burn Whip", "Hero Whip", "Whip Sword", "Masquerade Whip S", "Striking Tail", "Great Whip Sword", "Queen's Whip", "Chain Whip", "Bone Eater Whip", "Naraku Whip S", "Sea of Stars Whip", "Katana", "Unmarked Katana", "Gunto", "Imitation Katana", "Antique Gunto", "Seishiki Sword", "Jagato", "Muramasa", "Imperial Katana", "Senryo Yakusha S", "Fury Blade", "Iai Katana", "Orochito", "Owazamono", "Master's Iai Katana", "Red Demon Blade", "Usumidori S", "Ame-no-Habakiri", "Brass Knuckles", "Delta Knuckles", "Heavy Grip", "Hell Knuckles", "Heavy Pound", "Clenched Fist", "Metal Duster", "Iron Fist", "Death's Claws", "Crusher", "Bear Gloves S", "Demon Fist", "Flash Punch", "Omega Knuckles", "Sanction", "Vajra S", "Sabazios S", "Royal Touch", "Axe", "Felling Axe", "Battle Axe", "Enchanting Axe", "Bardiche", "Halberd", "Mega Axe", "Death Contract S", "Crescent Axe", "Great Axe", "Beheading Axe", "Ice Axe", "Tabar", "Gilgamesh Axe", "Celtis", "Amazon Axe", "Fleurs du Mal S", "Parashu", "Yo-Yo", "Spin Attacker", "Super Yo-Yo", "Pulsar", "Teguruma", "Metal Yo-Yo", "Orbiter", "Yo-2K", "Water Yo-Yo", "Comet Spiral", "Assassination Top", "Mantra Top", "Astro Bullet", "Blood Storm", "Singularity", "Mechanical Heart", "Forbidden Fruit", "Elpis", "Zweihander", "Flamberge", "Zanyouto", "Shadow Hunter", "Traffic Sign", "Demon Slayer", "Litania", "Annihilator", "Lifeless Slayer", "Gram", "Curtana"]
            armorsList = ["Black Polo", "Neckerchief", "Tanktop", "Off-Shoulder Top", "Long Hoodie", "Biker Jacket", "Pink Dress", "Olive Jacket", "Silicone Armor", "Black Suit", "Padded Shirt", "Lynx Camo Vest", "Chain Vest", "Reckless Vest", "Army Vest", "Austere Haori", "Papal Robes", "Hope Shirt", "Ghillie Vest", "Egoist Shirt", "Silver Vest", "Soul Vest", "Silver Vest+", "Soul Vest+", "Shoulder Pads", "Burntech", "Survival Vest", "Cosmic Undershirt", "Motto Hoodie", "Plate Vest", "Retention Vest", "Athletic Shirt", "Saint's Tunic", "Fluted Guard", "Brave Waistcoat", "Mammoth Gown", "Karna's Robe", "Demon's Jacket", "Karna's Robe+", "Demon's Jacket+", "Battle Camisole", "Magic Camisole", "Robot Apron", "Lady's Dress", "Power Camisole", "Glaring Cape", "Thermo Dress", "Elysian Robe", "Dogwatch Kimono", "Rune Dress", "Kotodama Cape", "Titanium Corset", "Haten Robe", "Valkyrie Robe", "Titanium Corset+", "Haten Robe+", "Silk Scarf", "Cat Sweater", "Breeze Scarf", "Water Crown", "Cone Collar", "Camo Collar", "Sparkly Collar", "Morose Collar", "Resilient Scarf", "Just Collar", "Measuring Collar", "Sublime Collar", "Nekomata Coat", "Sublime Collar", "Nekomata Coat+", "Hacker Gear Mk. 1", "Hacker Gear Mk. 2", "Hacker Gear Mk. 3", "Hacker Gear Mk. 4"]
            accessoriesList = ["Hip Glasses", "Single Bangle", "Fanny Pack", "Sunglasses", "Silver Key Ring", "Modern Necklace", "Clover Bracelet", "Headphones", "Knee-High Boots", "Black Tie", "Breath Sash", "Stamina Sash", "Vitality Sash", "Vigor Sash", "Chakra Chocker", "Mind Choker", "Soul Choker", "Spirit Choker", "Power Anklet", "Muscle Anklet", "Berserk Anklet", "Hercules Anklet", "Atlas Anklet", "Magic Amulet", "Witch Amulet", "Druid Amulet", "Rune Amulet", "Wizard Amulet", "Enduring Belt", "Fortress Belt", "Armada Belt", "Gigas Belt", "Gaia Belt", "Army Socks", "Cheater Socks", "Sonic Socks", "Skanda Socks", "Lucky Charm", "Zodiac Charm", "Feng Shui Charm", "Tyche Charm", "Alluring Sticker", "Charming Sticker", "Idol Sticker", "Star Sticker", "Knight's Crest", "Roland Medal", "Glinting Monocle", "Wood Clappers", "Hot Water Pouch", "Rubber Gloves", "Shield Googles", "Notebook", "Sleepless Gem", "Wooden Clogs", "Calming Gem", "Brain Guard", "Rakshasa Belt", "Vajra Belt", "Skanda Belt", "Flame Ring", "Ignis Ring", "Ice Ring", "Glacier Ring", "Elec Ring", "Blitz Ring", "Wind Ring", "Cyclone Ring", "Atom Ring", "Shelter Ring", "Psychic Ring", "Parapsy Ring", "Shoten Ring", "Nirvana Ring", "Midnight Ring", "Druj Ring", "Spirit Belt", "Hachiman Belt", "Red Band", "Blue Band", "Green Band", "Yellow Band", "Star Band", "Mind Band", "White Band", "Black Band", "Omnipotent Orb", "Expedite Ring", "Gun Band", "Felicitas Locket", "Imish Corsage", "Grand Crystal", "Burst Emblem", "Steel Brooch", "Crimson Brooch", "Sky Blue Brooch", "Emerald Brooch", "Sunshine Brooch", "Meteor Brooch", "Circle Brooch", "Light Brooch", "Dark Brooch", "Panacea Tiara", "Deus Feather", "Life Pocketbook", "Wing Sock", "Guard Charm", "Victory Charm", "New Driver Sticker", "Fortune Bell", "Chazukemaru Charm", "Masamune Patch", "Coral Necklace", "Comedian Strap", "Takoyaki Keychain", "Billiken Statue", "Travel Game Set", "1:20 Candlecutter", "Salvia Charm", "Seashell Necklace", "Featherman Mask", "Phantom Scarf", "Ann's Bracelet", "Filled Sketchbook", "Phantom Keychain", "Futaba's Charm", "Baton Keychain", "Custom Gloves", "Haru's Teaspoon"]
            consumablesList = ["Adhesive Bandage", "Quickfix a", "Quickfix Z", "Medicine", "Niuhuang Dan", "Power Incense", "Magic Incense", "Guard Incense", "Speed Incense", "Luck Incense", "HP Incense", "SP Incense", "Devil Fruit", "Life Stone", "Bead", "Bead Chain", "Soul Drop", "Snuff Soul", "Chewing Soul", "Soul Food", "Soma", "Revival Bead", "Balm of Life", "Rescue Pill", "Resuscitation Pill", "Hot and Sour Tea", "Super Jolt", "Mental Floss", "Donut-Worry", "Soothing Towel", "Wide Eye Drops", "Repentance Ashes", "Hiranya", "Amrita Soda", "Purifying Ash", "Mega Purifying Ash", "Second Maid", "Joylent", "Muscle Tea", "Oh! Shiruko", "Creature", "Moronamin G", "Earl Green", "Manta", "Arginade", "Water of Rebirth", "Dr. Salt NEO", "1UP", "Utagawa Water", "Utagawa Soda", "Chunky Potage", "Starvicks", "Nastea", "Ultimate Amazake", "Zunda Ramune", "Gyutan Soda", "Alien Brand Jelly", "Sepia Shock", "Oh My Orange", "Okinawa Kaabuchi", "Chilly Candy", "Goripeshi", "Leblanc Coffee", "Gyutan Stew", "Salmon Bowl", "Leblanc Curry", "Miso Ramen", "Jingisukan", "Seafood Bowl", "Okinawa Soba", "Kyoto Curry", "Goya Chanpuru", "Goat Soup", "Churrasco", "Obanzai", "Okonomiyaki", "Crab Hot Pot", "Osaka Sushi", "Kushikatsu", "Master Coffee", "Master Curry", "Select Coffee Beans", "Salmon", "Gyutan", "Carrot", "Onion", "Pork", "Rice", "Flour", "Miso", "Lamb Meat", "Cabbage", "Tuna", "Egg", "Beef", "Cooking Awamori", "Goya", "Tofu", "Goat Meat", "Kamo-Nasu Eggplant", "Crab", "Squid Paradise", "Mixed Nuts", "Big Bang Burger", "Saturn Fries", "Venus Salad", "Karaage King", "Jagariko", "Foreign Nikuman", "Gyutan Bento", "Zunda Mochi", "Zunda Shake", "Zunda Daifuku", "Hot Spots!: Sendai", "Caffe Latte", "Honey Toast", "Gyutan Ice Cream", "Bamboo Monaka", "Bamboo Yokan", "Gyutan Burger", "Jingisucaramel", "Sushi Box", "Grainy Sea Urchin", "Ika-somen", "Cod-Liver Oil Candy", "Suppon Drink", "Steam Eye Patch", "Soul Jelly", "Masquerade Parfait", "Reunion Parfait", "Shikuwasa Soda", "Guava Juice", "Packed Yakisoba", "Whole Watermelon", "Hot Spots!: Okinawa", "Chinsuko", "Sata Andagi", "Blue Chestnut Tart", "Uchina Bento", "Pork/Egg Onigiri", "4 Piece Takoyaki", "6 Piece Takoyaki", "Beef Katsu", "Red Ginger Katsu", "Negiyaki", "Hot Spots!: Osaka", "773's Pork Bun", "Morozeff's Flan", "Grilled Crab Miso", "Grilled Corn", "Boiled Corn", "Wow! Grilled Corn", "Okapi Guarana", "Brotinoporin", "Bear Caution Sticker", "Lavender Potpourri", "Strawberry Gelato", "Banana Gelato", "Expired Perfume", "Yomoginotsuki", "Walnut Yubeshi", "Zunda Dumpling", "Sesame Dumpling", "Sasa-Kamaboko", "Blowfish Sashimi", "Blowfish Skin Snack", "Starry Vanilla Roll", "Dark Choco Matter", "Chilled Pineapple", "Chocolate Banana", "Go Go Curry", "Go Go Hayashi Rice", "5 Piece Yakitori", "Grilled Rice Ball", "Scallop Katsu", "Shrimp Katsu", "Pork Katsu", "Co-Co Pudding", "Stomachache Candy", "Takeout Gyoza", "Nan-burger Bento", "Hamburg Bento", "Espresso", "Co-Co", "Lucky Takoyaki", "Candy", "Want-Be-Gone", "Oroaid", "Rock Salt", "Mootiful Zunda Soda", "Primordial Soup", "Grilled Raw Corn"]
            recipesList = ["Obanzai Recipe", "Kyoto Curry Recipe", "Master Curry Recipe", "Gyutan Stew Recipe", "Salmon Bowl Recipe", "Jingisukan Recipe", "Seafood Bowl Recipe", "Miso Ramen Recipe", "Okinawa Soba Recipe", "Goya Chanpuru Recipe", "Goat Soup Recipe", "Kushikatsu Recipe", "Okonomiyaki Recipe", "Crab Hot Pot Recipe", "Osaka Sushi Recipe", "Master Coffee Recipe", "Churrasco Recipe"]
            cashmaterialsList = ["Skull Keychain", "Mossy Mothman", "Dirty Phone Case", "Shiny Mini Bag", "Cute Wallet", "Stopped Watch", "Rusty Necklace", "Lovely Empty Bottle", "Sandy Doll", "Butterfly Fan", "Elegant Paper Crane", "Sharp Fork", "Frozen Spoon", "Flowery Notebook", "Pretty Kaleidoscope", "Bent Drain Pipe", "Electrical Connector", "Motherboard", "Festival Lantern", "Red Lantern", "Scarlet Haori", "Pretty Megaphone", "Belled Collar", "Golden Cat Statue", "Forgotten Ring", "Pearl Bracelet", "White Sunglasses", "Flaxen Umbrella", "Corsage Mask", "Sword Stick", "Black Clutch Bag", "Rainbow Penlight", "Old Projector", "Skinny Golf Club", "Chipped Microchip", "Strange Circuit", "Integrated Circuit", "Strange Disc", "Suspicious Text Data", "Vague File List", "Odd Report", "Illegible Document", "Unnatural Sample", "Pretty Seashell", "Sea Glass", "Natural Pearl"]
            skillcardsList = ["Lunge", "Assault Dive", "Megaton Raid", "God's Hand", "Cleave", "Giant Slice", "Brave Blade", "Sword Dance", "Vajra Blast", "Vorpal Blade", "Vicious Strike", "Heat Wave", "Gigantomachia", "Rampage", "Swift Strike", "Deathbound", "Agneyastra", "Double Fangs", "Tempest Slash", "Myriad Slashes", "Sledgehammer", "Terror Claw", "Headbutt", "Dream Needle", "Hysterical Slap", "Brain Shake", "Flash Bomb", "Bloodbath", "Memory Rush", "Dormin Rush", "Oni-Kagura", "Brain Buster", "Snap", "One-Shot Kill", "Triple Down", "Riot Gun", "Agi", "Agilao", "Agidyne ", "Inferno", "Maragi", "Maragion", "Maragidyne", "Blazing Hell", "Bufu", "Bufula", "Bufudyne", "Diamond Dust", "Mabufu", "Mabufula", "Mabufudyne", "Ice Age", "Zio", "Zionga", "Ziodyne", "Thunder Reign", "Mazio", "Mazionga", "Maziodyne", "Wild Thunder", "Garu", "Garula", "Garudyne", "Panta Rhei", "Magaru", "Magarula", "Magarudyna", "Vacuum Wave", "Psi", "Psio", "Psiodyne", "Psycho Force", "Mapsi", "Mapsio", "Mapsiodyne", "Psycho Blast", "Frei", "Freila", "Freidyne", "Atomic Flare", "Mafrei", "Mafreila", "Mafreidyne", "Cosmic Flare", "Kouha", "Kouga", "Kougaon", "Makouha", "Makouga", "Makougaon", "Hama", "Hamaon", "Mahama", "Mahamaon", "Eiha", "Eiga", "Eigaon", "Maeiha", "Maeiga", "Maeigaon", "Mudo", "Mudoon", "Mamudo", "Mamudoon", "Life Drain", "Megido", "Megidola", "Megidolaon", "Dazzler", "Evil Touch", "Makajama", "Dormina", "Taunt", "Marin Karin", "Nocturnal Flash", "Evil Smile", "Makajamaon", "Lullaby", "Wage War", "Brain Jack", "Dia", "Diarama", "Diarahan", "Media", "Mediarama", "Mediarahan", "Recarm", "Samarecarm", "Amrita Drop", "Amrita Shower", "Salvation", "Tarukaja", "Rakukaja", "Sukukaja", "Heat Riser", "Matarukaja", "Marakukaja", "Masukukaja", "Charge", "Concentrate", "Tarunda", "Rakunda", "Sukunda", "Debilitate", "Matarunda", "Marakunda", "Masukunda", "Dekunda", "Dekaja", "Tetraja", "Resist Phys", "Resist Fire", "Null Fire", "Drain Fire", "Resist Ice", "Null Ice", "Drain Ice", "Resist Wind", "Null Wind", "Drain Wind", "Resist Elec", "Null Elec", "Drain Elec", "Resist Psy", "Null Psy", "Drain Psy", "Resist Nuke", "Null Nuke", "Drain Nuke", "Resist Bless", "Null Bless", "Drain Bless", "Resist Curse", "Null Curse", "Drain Curse", "Fortify Spirit", "Null Dizzy", "Null Fear", "Null Forget", "Null Sleep", "Null Rage", "Null Brainwash", "Dodge Phys", "Evade Phys", "Dodge Fire", "Evade Fire", "Dodge Ice", "Evade Ice", "Dodge Wind", "Evade Wind", "Dodge Elec", "Evade Elec", "Dodge Psy", "Evade Psy", "Dodge Nuke", "Evade Nuke", "Dodge Bless", "Evade Bless", "Dodge Curse", "Evade Curse", "Angelic Grace", "Gun Boost", "Gun Amp", "Fire Boost", "Fire Amp", "Ice Boost", "Ice Amp", "Wind Boost", "Wind Amp", "Elec Boost", "Elec Amp", "Psy Boost", "Psy Amp", "Nuke Boost", "Nuke Amp", "Bless Boost", "Bless Amp", "Curse Boost", "Curse Amp", "Divine Grace", "Spell Master", "Hama Boost", "Mudo Boost", "Burn Boost", "Freeze Boost", "Shock Boost", "Dizzy Boost", "Fear Boost", "Forget Boost", "Sleep Boost", "Rage Boost", "Brainwash Boost", "Ailment Boost", "Firm Stance", "Attack Master", "Defense Master", "Speed Master", "Regenerate 1", "Regenerate 2", "Regenerate 3", "Endure", "Enduring Soul", "Survival Trick", "Rebel Soul", "Knockdown Style", "Soul Thief", "Technical Adept", "Technical High"]
            personaList = ["Slot 1", "Slot 2", "Slot 3", "Slot 4", "Slot 5", "Slot 6", "Slot 7", "Slot 8"]

            #########################################
            #             Save 1 List               #
            #########################################
            save_1_characterOffsets = [0x110694, 0x1106B5]
            save_1_mppbListOffsets = [0x1106E0, 0x1106E4, 0x110534]
            save_1_weaponListOffsets = [0x10F124, 0x10F126, 0x10F128, 0x10F12A, 0x10F12C, 0x10F12E, 0x10F130, 0x10F132, 0x10F134, 0x10F136, 0x10F138, 0x10F13A, 0x10F13C, 0x10F13E, 0x10F140, 0x10F142, 0x10F144, 0x10F146, 0x10F156, 0x10F158, 0x10F15A, 0x10F15C, 0x10F15E, 0x10F160, 0x10F162, 0x10F164, 0x10F166, 0x10F168, 0x10F16A, 0x10F16C, 0x10F16E, 0x10F170, 0x10F172, 0x10F174, 0x10F176, 0x10F188, 0x10F18A, 0x10F18C, 0x10F18E, 0x10F190, 0x10F192, 0x10F194, 0x10F196, 0x10F198, 0x10F19A, 0x10F19C, 0x10F19E, 0x10F1A0, 0x10F1A2, 0x10F1A4, 0x10F1A6, 0x10F1A8, 0x10F1AA, 0x10F1BA, 0x10F1BC, 0x10F1BE, 0x10F1C0, 0x10F1C2, 0x10F1C4, 0x10F1C6, 0x10F1C8, 0x10F1CA, 0x10F1CC, 0x10F1CE, 0x10F1D0, 0x10F1D2, 0x10F1D4, 0x10F1D6, 0x10F1D8, 0x10F1DA, 0x10F1DC, 0x10F1EC, 0x10F1EE, 0x10F1F0, 0x10F1F2, 0x10F1F4, 0x10F1F6, 0x10F1F8, 0x10F1FA, 0x10F1FC, 0x10F1FE, 0x10F200, 0x10F202, 0x10F204, 0x10F206, 0x10F208, 0x10F20A, 0x10F20C, 0x10F20E, 0x10F21E, 0x10F220, 0x10F222, 0x10F224, 0x10F226, 0x10F228, 0x10F22A, 0x10F22C, 0x10F22E, 0x10F230, 0x10F232, 0x10F234, 0x10F236, 0x10F238, 0x10F23A, 0x10F23C, 0x10F23E, 0x10F240, 0x10F250, 0x10F252, 0x10F254, 0x10F256, 0x10F258, 0x10F25A, 0x10F25C, 0x10F25E, 0x10F260, 0x10F262, 0x10F264, 0x10F266, 0x10F268, 0x10F26A, 0x10F26C, 0x10F26E, 0x10F270, 0x10F272, 0x10F282, 0x10F284, 0x10F286, 0x10F288, 0x10F28A, 0x10F28C, 0x10F28E, 0x10F290, 0x10F292, 0x10F294, 0x10F296, 0x10F298, 0x10F29A, 0x10F29C, 0x10F29E, 0x10F2A0, 0x10F2A2, 0x10F2A4, 0x10F2B4, 0x10F2B6, 0x10F2B8, 0x10F2BA, 0x10F2BC, 0x10F2BE, 0x10F2C0, 0x10F2C2, 0x10F2C4, 0x10F2C6, 0x10F2C8]
            save_1_armorsListOffsets = [0x10F50C, 0x10F50E, 0x10F510, 0x10F512, 0x10F514, 0x10F516, 0x10F518, 0x10F51A, 0x10F51C, 0x10F51E, 0x10F534, 0x10F536, 0x10F538, 0x10F53A, 0x10F53C, 0x10F53E, 0x10F540, 0x10F542, 0x10F544, 0x10F546, 0x10F548, 0x10F54A, 0x10F54C, 0x10F54E, 0x10F55C, 0x10F55E, 0x10F560, 0x10F562, 0x10F564, 0x10F566, 0x10F568, 0x10F56A, 0x10F56C, 0x10F56E, 0x10F570, 0x10F572, 0x10F574, 0x10F576, 0x10F578, 0x10F57A, 0x10F584, 0x10F586, 0x10F588, 0x10F58A, 0x10F58C, 0x10F58E, 0x10F590, 0x10F592, 0x10F594, 0x10F596, 0x10F598, 0x10F59A, 0x10F59C, 0x10F59E, 0x10F5A0, 0x10F5A2, 0x10F5AC, 0x10F5AE, 0x10F5B0, 0x10F5B2, 0x10F5B4, 0x10F5B6, 0x10F5B8, 0x10F5BA, 0x10F5BC, 0x10F5BE, 0x10F5C0, 0x10F5C2, 0x10F5C4, 0x10F5C6, 0x10F5C8, 0x10F5D4, 0x10F5D6, 0x10F5D8, 0x10F5DA]
            save_1_accessoriesListOffsets = [0x10F69C, 0x10F69E, 0x10F6A0, 0x10F6A2, 0x10F6A4, 0x10F6A6, 0x10F6A8, 0x10F6AA, 0x10F6AE, 0x10F6B0, 0x10F6BC, 0x10F6BE, 0x10F6C0, 0x10F6C2, 0x10F6C4, 0x10F6C6, 0x10F6C8, 0x10F6CA, 0x10F6CC, 0x10F6CE, 0x10F6D0, 0x10F6D2, 0x10F6D4, 0x10F6D6, 0x10F6D8, 0x10F6DA, 0x10F6DC, 0x10F6DE, 0x10F6E0, 0x10F6E2, 0x10F6E4, 0x10F6E6, 0x10F6E8, 0x10F6EA, 0x10F6EC, 0x10F6EE, 0x10F6F0, 0x10F6F2, 0x10F6F4, 0x10F6F6, 0x10F6F8, 0x10F6FA, 0x10F6FC, 0x10F6FE, 0x10F700, 0x10F702, 0x10F706, 0x10F708, 0x10F70A, 0x10F70C, 0x10F70E, 0x10F710, 0x10F712, 0x10F714, 0x10F716, 0x10F718, 0x10F71A, 0x10F71C, 0x10F71E, 0x10F720, 0x10F722, 0x10F724, 0x10F726, 0x10F728, 0x10F72A, 0x10F72C, 0x10F72E, 0x10F730, 0x10F732, 0x10F734, 0x10F736, 0x10F738, 0x10F73A, 0x10F73C, 0x10F73E, 0x10F740, 0x10F742, 0x10F744, 0x10F748, 0x10F74A, 0x10F74C, 0x10F74E, 0x10F750, 0x10F752, 0x10F754, 0x10F756, 0x10F75C, 0x10F75E, 0x10F766, 0x10F768, 0x10F76A, 0x10F76C, 0x10F76E, 0x10F770, 0x10F772, 0x10F774, 0x10F776, 0x10F778, 0x10F77A, 0x10F77C, 0x10F77E, 0x10F780, 0x10F782, 0x10F784, 0x10F786, 0x10F78C, 0x10F78E, 0x10F7C8, 0x10F7CA, 0x10F7CC, 0x10F7CE, 0x10F7D0, 0x10F7D4, 0x10F7DA, 0x10F7DC, 0x10F7DE, 0x10F7E8, 0x10F7EA, 0x10F7EC, 0x10F7EE, 0x10F7F0, 0x10F7F2, 0x10F7F4, 0x10F7F6, 0x10F7F8, 0x10F7FA, 0x10F7FC, 0x10F7FE, 0x10F800]
            save_1_consumablesListOffsets = [0x10F804, 0x10F806, 0x10F808, 0x10F80A, 0x10F80C, 0x10F818, 0x10F81A, 0x10F81C, 0x10F81E, 0x10F820, 0x10F822, 0x10F824, 0x10F82C, 0x10F82E, 0x10F830, 0x10F832, 0x10F840, 0x10F842, 0x10F844, 0x10F846, 0x10F848, 0x10F854, 0x10F856, 0x10F858, 0x10F85A, 0x10F868, 0x10F86A, 0x10F86C, 0x10F86E, 0x10F870, 0x10F872, 0x10F874, 0x10F876, 0x10F878, 0x10F890, 0x10F892, 0x10F8B8, 0x10F8BA, 0x10F8BC, 0x10F8BE, 0x10F8C0, 0x10F8C2, 0x10F8C4, 0x10F8C6, 0x10F8C8, 0x10F8CA, 0x10F8CC, 0x10F8CE, 0x10F8D0, 0x10F8D2, 0x10F8D4, 0x10F8D6, 0x10F8D8, 0x10F8DA, 0x10F8DC, 0x10F8DE, 0x10F8E0, 0x10F8E2, 0x10F8E4, 0x10F8E6, 0x10F8E8, 0x10F8EA, 0x10F8F4, 0x10F8F6, 0x10F8F8, 0x10F8FA, 0x10F8FC, 0x10F8FE, 0x10F900, 0x10F902, 0x10F904, 0x10F906, 0x10F908, 0x10F90A, 0x10F90C, 0x10F90E, 0x10F910, 0x10F912, 0x10F914, 0x10F916, 0x10F91A, 0x10F958, 0x10F95A, 0x10F95C, 0x10F95E, 0x10F960, 0x10F962, 0x10F964, 0x10F966, 0x10F968, 0x10F96A, 0x10F96C, 0x10F96E, 0x10F970, 0x10F972, 0x10F974, 0x10F976, 0x10F978, 0x10F97A, 0x10F97C, 0x10F97E, 0x10F9BC, 0x10F9BE, 0x10F9D0, 0x10F9D2, 0x10F9D4, 0x10F9DA, 0x10F9DC, 0x10F9DE, 0x10F9E6, 0x10F9EE, 0x10F9F0, 0x10F9F2, 0x10FA0E, 0x10FA16, 0x10FA18, 0x10FA1C, 0x10FA20, 0x10FA22, 0x10FA2A, 0x10FA34, 0x10FA40, 0x10FA42, 0x10FA44, 0x10FA52, 0x10FA54, 0x10FA56, 0x10FA58, 0x10FA66, 0x10FA68, 0x10FA7A, 0x10FA7C, 0x10FA7E, 0x10FA80, 0x10FA90, 0x10FA94, 0x10FA98, 0x10FA9A, 0x10FAA2, 0x10FAA6, 0x10FAAC, 0x10FAAE, 0x10FAC2, 0x10FAC4, 0x10FACC, 0x10FADE, 0x10FAE0, 0x10FAE2, 0x10FAF4, 0x10FAFC, 0x10FAFE, 0x10FB00, 0x10FB06, 0x10FB08, 0x10FB0A, 0x10FB0C, 0x10FB1A, 0x10FB1C, 0x10FB26, 0x10FB2E, 0x10FB30, 0x10FB38, 0x10FB3A, 0x10FB3C, 0x10FB42, 0x10FB44, 0x10FB4C, 0x10FB4E, 0x10FB56, 0x10FB62, 0x10FB68, 0x10FB6A, 0x10FB72, 0x10FB7C, 0x10FB86, 0x10FB88, 0x10FB90, 0x10FB9A, 0x10FBA4, 0x10FBB8, 0x10FBC2, 0x10FBC4, 0x10FBD6, 0x10FBD8, 0x10FCDC, 0x10FCDE, 0x10FCE0, 0x10FCE2, 0x10FCE6, 0x10FCE8, 0x10FCEA, 0x10FCEC]
            save_1_recipesListOffsets = [0x10F932, 0x10F934, 0x10F936, 0x10F938, 0x10F93A, 0x10F93C, 0x10F93E, 0x10F940, 0x10F942, 0x10F944, 0x10F946, 0x10F948, 0x10F94A, 0x10F94C, 0x10F94E, 0x10F950, 0x10F952]
            save_1_cashmaterialsListOffsets = [0x10FB24, 0x10FB28, 0x10FBEC, 0x10FBEE, 0x10FBF2, 0x10FBF4, 0x10FBF8, 0x10FBFC, 0x10FBFE, 0x10FC02, 0x10FC08, 0x10FC0C, 0x10FC0E, 0x10FC12, 0x10FC18, 0x10FC1C, 0x10FC22, 0x10FC28, 0x10FC2C, 0x10FC32, 0x10FC38, 0x10FC3C, 0x10FC3E, 0x10FC42, 0x10FC48, 0x10FC4A, 0x10FC4C, 0x10FC4E, 0x10FC52, 0x10FC58, 0x10FC5C, 0x10FC5E, 0x10FC62, 0x10FC68, 0x10FC8C, 0x10FC90, 0x10FC94, 0x10FC98, 0x10FC9C, 0x10FCA0, 0x10FCA2, 0x10FCA4, 0x10FCA8, 0x10FCF0, 0x10FCF2, 0x10FCF4]
            save_1_skillcardsListOffsets = [0x10FFD4, 0x10FFD6, 0x10FFD8, 0x10FFDA, 0x10FFDC, 0x10FFDE, 0x10FFE0, 0x10FFE2, 0x10FFE4, 0x10FFE6, 0x10FFE8, 0x10FFEA, 0x10FFEC, 0x10FFEE, 0x10FFF0, 0x10FFF2, 0x10FFF4, 0x10FFF6, 0x10FFF8, 0x10FFFA, 0x10FFFC, 0x10FFFE, 0x110000, 0x110002, 0x110004, 0x110006, 0x110008, 0x11000A, 0x11000C, 0x11000E, 0x110010, 0x110012, 0x110014, 0x110016, 0x110018, 0x11001A, 0x11001C, 0x11001E, 0x110020, 0x110022, 0x110024, 0x110026, 0x110028, 0x11002A, 0x11002C, 0x11002E, 0x110030, 0x110032, 0x110034, 0x110036, 0x110038, 0x11003A, 0x11003C, 0x11003E, 0x110040, 0x110042, 0x110044, 0x110046, 0x110048, 0x11004A, 0x11004C, 0x11004E, 0x110050, 0x110052, 0x110054, 0x110056, 0x110058, 0x11005A, 0x11005C, 0x11005E, 0x110060, 0x110062, 0x110064, 0x110066, 0x110068, 0x11006A, 0x11006C, 0x11006E, 0x110070, 0x110072, 0x110074, 0x110076, 0x110078, 0x11007A, 0x11007C, 0x11007E, 0x110080, 0x110082, 0x110084, 0x110086, 0x110088, 0x11008A, 0x11008C, 0x11008E, 0x110090, 0x110092, 0x110094, 0x110096, 0x110098, 0x11009A, 0x11009C, 0x11009E, 0x1100A0, 0x1100A2, 0x1100A4, 0x1100A6, 0x1100A8, 0x1100AA, 0x1100AC, 0x1100AE, 0x1100B0, 0x1100B2, 0x1100B4, 0x1100B6, 0x1100B8, 0x1100BA, 0x1100BC, 0x1100BE, 0x1100C0, 0x1100C2, 0x1100C4, 0x1100C6, 0x1100C8, 0x1100CA, 0x1100CC, 0x1100CE, 0x1100D0, 0x1100D2, 0x1100D4, 0x1100DC, 0x1100E4, 0x1100E6, 0x1100E8, 0x1100EA, 0x1100EC, 0x1100EE, 0x1100F0, 0x1100F2, 0x1100F4, 0x1100F6, 0x1100F8, 0x1100FA, 0x1100FC, 0x1100FE, 0x110100, 0x110102, 0x110104, 0x110106, 0x110108, 0x11010A, 0x11010C, 0x11010E, 0x110110, 0x110112, 0x110114, 0x110116, 0x110118, 0x11011A, 0x11011C, 0x11011E, 0x110120, 0x110122, 0x110124, 0x110126, 0x110128, 0x11012A, 0x11012C, 0x11012E, 0x110130, 0x110132, 0x110134, 0x110136, 0x110138, 0x11013A, 0x11013C, 0x11013E, 0x110140, 0x110142, 0x110144, 0x110146, 0x110148, 0x11014A, 0x11014C, 0x11014E, 0x110150, 0x110152, 0x110154, 0x110156, 0x110158, 0x11015A, 0x11015C, 0x11015E, 0x110160, 0x110162, 0x110164, 0x110166, 0x110168, 0x11016A, 0x11016C, 0x11016E, 0x110170, 0x110172, 0x110174, 0x110176, 0x110178, 0x11017A, 0x11017C, 0x11017E, 0x110180, 0x110182, 0x110184, 0x110186, 0x110188, 0x11018A, 0x11018C, 0x11018E, 0x110190, 0x110192, 0x110194, 0x110196, 0x110198, 0x11019A, 0x11019C, 0x11019E, 0x1101A0, 0x1101A2, 0x1101A4, 0x1101A6, 0x1101A8, 0x1101AA, 0x1101AC, 0x1101AE, 0x1101B0, 0x1101B2, 0x1101B8, 0x1101BA, 0x1101BC, 0x1101BE, 0x1101C0, 0x1101C2, 0x1101C4, 0x1101C6, 0x1101C8, 0x1101CE, 0x1101D0, 0x1101D2, 0x1101D4, 0x1101D6]
            save_1_personaListOffsets = [0x10C11C, 0x10C11E, 0x10C120, 0x10C122, 0x10C124, 0x10C126, 0x10C128, 0x10C12A]

            #########################################
            #             Save 2 List               #
            #########################################
            save_2_characterOffsets = [0x1994CA, 0x1994EB]
            save_2_mppbListOffsets = [0x199516, 0x19951A, 0x19936A]
            save_2_weaponListOffsets = [0x197F5A, 0x197F5C, 0x197F5E, 0x197F60, 0x197F62, 0x197F64, 0x197F66, 0x197F68, 0x197F6A, 0x197F6C, 0x197F6E, 0x197F70, 0x197F72, 0x197F74, 0x197F76, 0x197F78, 0x197F7A, 0x197F7C, 0x197F8C, 0x197F8E, 0x197F90, 0x197F92, 0x197F94, 0x197F96, 0x197F98, 0x197F9A, 0x197F9C, 0x197F9E, 0x197FA0, 0x197FA2, 0x197FA4, 0x197FA6, 0x197FA8, 0x197FAA, 0x197FAC, 0x197FBE, 0x197FC0, 0x197FC2, 0x197FC4, 0x197FC6, 0x197FC8, 0x197FCA, 0x197FCC, 0x197FCE, 0x197FD0, 0x197FD2, 0x197FD4, 0x197FD6, 0x197FD8, 0x197FDA, 0x197FDC, 0x197FDE, 0x197FE0, 0x197FF0, 0x197FF2, 0x197FF4, 0x197FF6, 0x197FF8, 0x197FFA, 0x197FFC, 0x197FFE, 0x198000, 0x198002, 0x198004, 0x198006, 0x198008, 0x19800A, 0x19800C, 0x19800E, 0x198010, 0x198012, 0x198022, 0x198024, 0x198026, 0x198028, 0x19802A, 0x19802C, 0x19802E, 0x198030, 0x198032, 0x198034, 0x198036, 0x198038, 0x19803A, 0x19803C, 0x19803E, 0x198040, 0x198042, 0x198044, 0x198054, 0x198056, 0x198058, 0x19805A, 0x19805C, 0x19805E, 0x198060, 0x198062, 0x198064, 0x198066, 0x198068, 0x19806A, 0x19806C, 0x19806E, 0x198070, 0x198072, 0x198074, 0x198076, 0x198086, 0x198088, 0x19808A, 0x19808C, 0x19808E, 0x198090, 0x198092, 0x198094, 0x198096, 0x198098, 0x19809A, 0x19809C, 0x19809E, 0x1980A0, 0x1980A2, 0x1980A4, 0x1980A6, 0x1980A8, 0x1980B8, 0x1980BA, 0x1980BC, 0x1980BE, 0x1980C0, 0x1980C2, 0x1980C4, 0x1980C6, 0x1980C8, 0x1980CA, 0x1980CC, 0x1980CE, 0x1980D0, 0x1980D2, 0x1980D4, 0x1980D6, 0x1980D8, 0x1980DA, 0x1980EA, 0x1980EC, 0x1980EE, 0x1980F0, 0x1980F2, 0x1980F4, 0x1980F6, 0x1980F8, 0x1980FA, 0x1980FC, 0x1980FE]
            save_2_armorsListOffsets = [0x198342, 0x198344, 0x198346, 0x198348, 0x19834A, 0x19834C, 0x19834E, 0x198350, 0x198352, 0x198354, 0x19836A, 0x19836C, 0x19836E, 0x198370, 0x198372, 0x198374, 0x198376, 0x198378, 0x19837A, 0x19837C, 0x19837E, 0x198380, 0x198382, 0x198384, 0x198392, 0x198394, 0x198396, 0x198398, 0x19839A, 0x19839C, 0x19839E, 0x1983A0, 0x1983A2, 0x1983A4, 0x1983A6, 0x1983A8, 0x1983AA, 0x1983AC, 0x1983AE, 0x1983B0, 0x1983BA, 0x1983BC, 0x1983BE, 0x1983C0, 0x1983C2, 0x1983C4, 0x1983C6, 0x1983C8, 0x1983CA, 0x1983CC, 0x1983CE, 0x1983D0, 0x1983D2, 0x1983D4, 0x1983D6, 0x1983D8, 0x1983E2, 0x1983E4, 0x1983E6, 0x1983E8, 0x1983EA, 0x1983EC, 0x1983EE, 0x1983F0, 0x1983F2, 0x1983F4, 0x1983F6, 0x1983F8, 0x1983FA, 0x1983FC, 0x1983FE, 0x19840A, 0x19840C, 0x19840E, 0x198410]
            save_2_accessoriesListOffsets = [0x1984D2, 0x1984D4, 0x1984D6, 0x1984D8, 0x1984DA, 0x1984DC, 0x1984DE, 0x1984E0, 0x1984E4, 0x1984E6, 0x1984F2, 0x1984F4, 0x1984F6, 0x1984F8, 0x1984FA, 0x1984FC, 0x1984FE, 0x198500, 0x198502, 0x198504, 0x198506, 0x198508, 0x19850A, 0x19850C, 0x19850E, 0x198510, 0x198512, 0x198514, 0x198516, 0x198518, 0x19851A, 0x19851C, 0x19851E, 0x198520, 0x198522, 0x198524, 0x198526, 0x198528, 0x19852A, 0x19852C, 0x19852E, 0x198530, 0x198532, 0x198534, 0x198536, 0x198538, 0x19853C, 0x19853E, 0x198540, 0x198542, 0x198544, 0x198546, 0x198548, 0x19854A, 0x19854C, 0x19854E, 0x198550, 0x198552, 0x198554, 0x198556, 0x198558, 0x19855A, 0x19855C, 0x19855E, 0x198560, 0x198562, 0x198564, 0x198566, 0x198568, 0x19856A, 0x19856C, 0x19856E, 0x198570, 0x198572, 0x198574, 0x198576, 0x198578, 0x19857A, 0x19857E, 0x198580, 0x198582, 0x198584, 0x198586, 0x198588, 0x19858A, 0x19858C, 0x198592, 0x198594, 0x19859C, 0x19859E, 0x1985A0, 0x1985A2, 0x1985A4, 0x1985A6, 0x1985A8, 0x1985AA, 0x1985AC, 0x1985AE, 0x1985B0, 0x1985B2, 0x1985B4, 0x1985B6, 0x1985B8, 0x1985BA, 0x1985BC, 0x1985C2, 0x1985C4, 0x1985FE, 0x198600, 0x198602, 0x198604, 0x198606, 0x19860A, 0x198610, 0x198612, 0x198614, 0x19861E, 0x198620, 0x198622, 0x198624, 0x198626, 0x198628, 0x19862A, 0x19862C, 0x19862E, 0x198630, 0x198632, 0x198634, 0x198636]
            save_2_consumablesListOffsets = [0x19863A, 0x19863C, 0x19863E, 0x198640, 0x198642, 0x19864E, 0x198650, 0x198652, 0x198654, 0x198656, 0x198658, 0x19865A, 0x198662, 0x198664, 0x198666, 0x198668, 0x198676, 0x198678, 0x19867A, 0x19867C, 0x19867E, 0x19868A, 0x19868C, 0x19868E, 0x198690, 0x19869E, 0x1986A0, 0x1986A2, 0x1986A4, 0x1986A6, 0x1986A8, 0x1986AA, 0x1986AC, 0x1986AE, 0x1986C6, 0x1986C8, 0x1986EE, 0x1986F0, 0x1986F2, 0x1986F4, 0x1986F6, 0x1986F8, 0x1986FA, 0x1986FC, 0x1986FE, 0x198700, 0x198702, 0x198704, 0x198706, 0x198708, 0x19870A, 0x19870C, 0x19870E, 0x198710, 0x198712, 0x198714, 0x198716, 0x198718, 0x19871A, 0x19871C, 0x19871E, 0x198720, 0x19872A, 0x19872C, 0x19872E, 0x198730, 0x198732, 0x198734, 0x198736, 0x198738, 0x19873A, 0x19873C, 0x19873E, 0x198740, 0x198742, 0x198744, 0x198746, 0x198748, 0x19874A, 0x19874C, 0x198750, 0x19878E, 0x198790, 0x198792, 0x198794, 0x198796, 0x198798, 0x19879A, 0x19879C, 0x19879E, 0x1987A0, 0x1987A2, 0x1987A4, 0x1987A6, 0x1987A8, 0x1987AA, 0x1987AC, 0x1987AE, 0x1987B0, 0x1987B2, 0x1987B4, 0x1987F2, 0x1987F4, 0x198806, 0x198808, 0x19880A, 0x198810, 0x198812, 0x198814, 0x19881C, 0x198824, 0x198826, 0x198828, 0x198844, 0x19884C, 0x19884E, 0x198852, 0x198856, 0x198858, 0x198860, 0x19886A, 0x198876, 0x198878, 0x19887A, 0x198888, 0x19888A, 0x19888C, 0x19888E, 0x19889C, 0x19889E, 0x1988B0, 0x1988B2, 0x1988B4, 0x1988B6, 0x1988C6, 0x1988CA, 0x1988CE, 0x1988D0, 0x1988D8, 0x1988DC, 0x1988E2, 0x1988E4, 0x1988F8, 0x1988FA, 0x198902, 0x198914, 0x198916, 0x198918, 0x19892A, 0x198932, 0x198934, 0x198936, 0x19893C, 0x19893E, 0x198940, 0x198942, 0x198950, 0x198952, 0x19895C, 0x198964, 0x198966, 0x19896E, 0x198970, 0x198972, 0x198978, 0x19897A, 0x198982, 0x198984, 0x19898C, 0x198998, 0x19899E, 0x1989A0, 0x1989A8, 0x1989B2, 0x1989BC, 0x1989BE, 0x1989C6, 0x1989D0, 0x1989DA, 0x1989EE, 0x1989F8, 0x1989FA, 0x198A0C, 0x198A0E, 0x198B12, 0x198B14, 0x198B16, 0x198B18, 0x198B1C, 0x198B1E, 0x198B20, 0x198B22]
            save_2_recipesListOffsets = [0x198768, 0x19876A, 0x19876C, 0x19876E, 0x198770, 0x198772, 0x198774, 0x198776, 0x198778, 0x19877A, 0x19877C, 0x19877E, 0x198780, 0x198782, 0x198784, 0x198786, 0x198788]
            save_2_cashmaterialsListOffsets = [0x19895A, 0x19895E, 0x198A22, 0x198A24, 0x198A28, 0x198A2A, 0x198A2E, 0x198A32, 0x198A34, 0x198A38, 0x198A3E, 0x198A42, 0x198A44, 0x198A48, 0x198A4E, 0x198A52, 0x198A58, 0x198A5E, 0x198A62, 0x198A68, 0x198A6E, 0x198A72, 0x198A74, 0x198A78, 0x198A7E, 0x198A80, 0x198A82, 0x198A84, 0x198A88, 0x198A8E, 0x198A92, 0x198A94, 0x198A98, 0x198A9E, 0x198AC2, 0x198AC6, 0x198ACA, 0x198ACE, 0x198AD2, 0x198AD6, 0x198AD8, 0x198ADA, 0x198ADE, 0x198B26, 0x198B28, 0x198B2A]
            save_2_skillcardsListOffsets = [0x198E0A, 0x198E0C, 0x198E0E, 0x198E10, 0x198E12, 0x198E14, 0x198E16, 0x198E18, 0x198E1A, 0x198E1C, 0x198E1E, 0x198E20, 0x198E22, 0x198E24, 0x198E26, 0x198E28, 0x198E2A, 0x198E2C, 0x198E2E, 0x198E30, 0x198E32, 0x198E34, 0x198E36, 0x198E38, 0x198E3A, 0x198E3C, 0x198E3E, 0x198E40, 0x198E42, 0x198E44, 0x198E46, 0x198E48, 0x198E4A, 0x198E4C, 0x198E4E, 0x198E50, 0x198E52, 0x198E54, 0x198E56, 0x198E58, 0x198E5A, 0x198E5C, 0x198E5E, 0x198E60, 0x198E62, 0x198E64, 0x198E66, 0x198E68, 0x198E6A, 0x198E6C, 0x198E6E, 0x198E70, 0x198E72, 0x198E74, 0x198E76, 0x198E78, 0x198E7A, 0x198E7C, 0x198E7E, 0x198E80, 0x198E82, 0x198E84, 0x198E86, 0x198E88, 0x198E8A, 0x198E8C, 0x198E8E, 0x198E90, 0x198E92, 0x198E94, 0x198E96, 0x198E98, 0x198E9A, 0x198E9C, 0x198E9E, 0x198EA0, 0x198EA2, 0x198EA4, 0x198EA6, 0x198EA8, 0x198EAA, 0x198EAC, 0x198EAE, 0x198EB0, 0x198EB2, 0x198EB4, 0x198EB6, 0x198EB8, 0x198EBA, 0x198EBC, 0x198EBE, 0x198EC0, 0x198EC2, 0x198EC4, 0x198EC6, 0x198EC8, 0x198ECA, 0x198ECC, 0x198ECE, 0x198ED0, 0x198ED2, 0x198ED4, 0x198ED6, 0x198ED8, 0x198EDA, 0x198EDC, 0x198EDE, 0x198EE0, 0x198EE2, 0x198EE4, 0x198EE6, 0x198EE8, 0x198EEA, 0x198EEC, 0x198EEE, 0x198EF0, 0x198EF2, 0x198EF4, 0x198EF6, 0x198EF8, 0x198EFA, 0x198EFC, 0x198EFE, 0x198F00, 0x198F02, 0x198F04, 0x198F06, 0x198F08, 0x198F0A, 0x198F12, 0x198F1A, 0x198F1C, 0x198F1E, 0x198F20, 0x198F22, 0x198F24, 0x198F26, 0x198F28, 0x198F2A, 0x198F2C, 0x198F2E, 0x198F30, 0x198F32, 0x198F34, 0x198F36, 0x198F38, 0x198F3A, 0x198F3C, 0x198F3E, 0x198F40, 0x198F42, 0x198F44, 0x198F46, 0x198F48, 0x198F4A, 0x198F4C, 0x198F4E, 0x198F50, 0x198F52, 0x198F54, 0x198F56, 0x198F58, 0x198F5A, 0x198F5C, 0x198F5E, 0x198F60, 0x198F62, 0x198F64, 0x198F66, 0x198F68, 0x198F6A, 0x198F6C, 0x198F6E, 0x198F70, 0x198F72, 0x198F74, 0x198F76, 0x198F78, 0x198F7A, 0x198F7C, 0x198F7E, 0x198F80, 0x198F82, 0x198F84, 0x198F86, 0x198F88, 0x198F8A, 0x198F8C, 0x198F8E, 0x198F90, 0x198F92, 0x198F94, 0x198F96, 0x198F98, 0x198F9A, 0x198F9C, 0x198F9E, 0x198FA0, 0x198FA2, 0x198FA4, 0x198FA6, 0x198FA8, 0x198FAA, 0x198FAC, 0x198FAE, 0x198FB0, 0x198FB2, 0x198FB4, 0x198FB6, 0x198FB8, 0x198FBA, 0x198FBC, 0x198FBE, 0x198FC0, 0x198FC2, 0x198FC4, 0x198FC6, 0x198FC8, 0x198FCA, 0x198FCC, 0x198FCE, 0x198FD0, 0x198FD2, 0x198FD4, 0x198FD6, 0x198FD8, 0x198FDA, 0x198FDC, 0x198FDE, 0x198FE0, 0x198FE2, 0x198FE4, 0x198FE6, 0x198FE8, 0x198FEE, 0x198FF0, 0x198FF2, 0x198FF4, 0x198FF6, 0x198FF8, 0x198FFA, 0x198FFC, 0x198FFE, 0x199004, 0x199006, 0x199008, 0x19900A, 0x19900C]
            save_2_personaListOffsets = [0x194F52, 0x194F54, 0x194F56, 0x194F58, 0x194F5A, 0x194F5C, 0x194F5E, 0x194F60]

            #########################################
            #             Save 3 List               #
            #########################################
            save_3_characterOffsets = [0x222300, 0x222321]
            save_3_mppbListOffsets = [0x22234C, 0x222350, 0x2221A0]
            save_3_weaponListOffsets = [0x220D90, 0x220D92, 0x220D94, 0x220D96, 0x220D98, 0x220D9A, 0x220D9C, 0x220D9E, 0x220DA0, 0x220DA2, 0x220DA4, 0x220DA6, 0x220DA8, 0x220DAA, 0x220DAC, 0x220DAE, 0x220DB0, 0x220DB2, 0x220DC2, 0x220DC4, 0x220DC6, 0x220DC8, 0x220DCA, 0x220DCC, 0x220DCE, 0x220DD0, 0x220DD2, 0x220DD4, 0x220DD6, 0x220DD8, 0x220DDA, 0x220DDC, 0x220DDE, 0x220DE0, 0x220DE2, 0x220DF4, 0x220DF6, 0x220DF8, 0x220DFA, 0x220DFC, 0x220DFE, 0x220E00, 0x220E02, 0x220E04, 0x220E06, 0x220E08, 0x220E0A, 0x220E0C, 0x220E0E, 0x220E10, 0x220E12, 0x220E14, 0x220E16, 0x220E26, 0x220E28, 0x220E2A, 0x220E2C, 0x220E2E, 0x220E30, 0x220E32, 0x220E34, 0x220E36, 0x220E38, 0x220E3A, 0x220E3C, 0x220E3E, 0x220E40, 0x220E42, 0x220E44, 0x220E46, 0x220E48, 0x220E58, 0x220E5A, 0x220E5C, 0x220E5E, 0x220E60, 0x220E62, 0x220E64, 0x220E66, 0x220E68, 0x220E6A, 0x220E6C, 0x220E6E, 0x220E70, 0x220E72, 0x220E74, 0x220E76, 0x220E78, 0x220E7A, 0x220E8A, 0x220E8C, 0x220E8E, 0x220E90, 0x220E92, 0x220E94, 0x220E96, 0x220E98, 0x220E9A, 0x220E9C, 0x220E9E, 0x220EA0, 0x220EA2, 0x220EA4, 0x220EA6, 0x220EA8, 0x220EAA, 0x220EAC, 0x220EBC, 0x220EBE, 0x220EC0, 0x220EC2, 0x220EC4, 0x220EC6, 0x220EC8, 0x220ECA, 0x220ECC, 0x220ECE, 0x220ED0, 0x220ED2, 0x220ED4, 0x220ED6, 0x220ED8, 0x220EDA, 0x220EDC, 0x220EDE, 0x220EEE, 0x220EF0, 0x220EF2, 0x220EF4, 0x220EF6, 0x220EF8, 0x220EFA, 0x220EFC, 0x220EFE, 0x220F00, 0x220F02, 0x220F04, 0x220F06, 0x220F08, 0x220F0A, 0x220F0C, 0x220F0E, 0x220F10, 0x220F20, 0x220F22, 0x220F24, 0x220F26, 0x220F28, 0x220F2A, 0x220F2C, 0x220F2E, 0x220F30, 0x220F32, 0x220F34]
            save_3_armorsListOffsets = [0x221178, 0x22117A, 0x22117C, 0x22117E, 0x221180, 0x221182, 0x221184, 0x221186, 0x221188, 0x22118A, 0x2211A0, 0x2211A2, 0x2211A4, 0x2211A6, 0x2211A8, 0x2211AA, 0x2211AC, 0x2211AE, 0x2211B0, 0x2211B2, 0x2211B4, 0x2211B6, 0x2211B8, 0x2211BA, 0x2211C8, 0x2211CA, 0x2211CC, 0x2211CE, 0x2211D0, 0x2211D2, 0x2211D4, 0x2211D6, 0x2211D8, 0x2211DA, 0x2211DC, 0x2211DE, 0x2211E0, 0x2211E2, 0x2211E4, 0x2211E6, 0x2211F0, 0x2211F2, 0x2211F4, 0x2211F6, 0x2211F8, 0x2211FA, 0x2211FC, 0x2211FE, 0x221200, 0x221202, 0x221204, 0x221206, 0x221208, 0x22120A, 0x22120C, 0x22120E, 0x221218, 0x22121A, 0x22121C, 0x22121E, 0x221220, 0x221222, 0x221224, 0x221226, 0x221228, 0x22122A, 0x22122C, 0x22122E, 0x221230, 0x221232, 0x221234, 0x221240, 0x221242, 0x221244, 0x221246]
            save_3_accessoriesListOffsets = [0x221308, 0x22130A, 0x22130C, 0x22130E, 0x221310, 0x221312, 0x221314, 0x221316, 0x22131A, 0x22131C, 0x221328, 0x22132A, 0x22132C, 0x22132E, 0x221330, 0x221332, 0x221334, 0x221336, 0x221338, 0x22133A, 0x22133C, 0x22133E, 0x221340, 0x221342, 0x221344, 0x221346, 0x221348, 0x22134A, 0x22134C, 0x22134E, 0x221350, 0x221352, 0x221354, 0x221356, 0x221358, 0x22135A, 0x22135C, 0x22135E, 0x221360, 0x221362, 0x221364, 0x221366, 0x221368, 0x22136A, 0x22136C, 0x22136E, 0x221372, 0x221374, 0x221376, 0x221378, 0x22137A, 0x22137C, 0x22137E, 0x221380, 0x221382, 0x221384, 0x221386, 0x221388, 0x22138A, 0x22138C, 0x22138E, 0x221390, 0x221392, 0x221394, 0x221396, 0x221398, 0x22139A, 0x22139C, 0x22139E, 0x2213A0, 0x2213A2, 0x2213A4, 0x2213A6, 0x2213A8, 0x2213AA, 0x2213AC, 0x2213AE, 0x2213B0, 0x2213B4, 0x2213B6, 0x2213B8, 0x2213BA, 0x2213BC, 0x2213BE, 0x2213C0, 0x2213C2, 0x2213C8, 0x2213CA, 0x2213D2, 0x2213D4, 0x2213D6, 0x2213D8, 0x2213DA, 0x2213DC, 0x2213DE, 0x2213E0, 0x2213E2, 0x2213E4, 0x2213E6, 0x2213E8, 0x2213EA, 0x2213EC, 0x2213EE, 0x2213F0, 0x2213F2, 0x2213F8, 0x2213FA, 0x221434, 0x221436, 0x221438, 0x22143A, 0x22143C, 0x221440, 0x221446, 0x221448, 0x22144A, 0x221454, 0x221456, 0x221458, 0x22145A, 0x22145C, 0x22145E, 0x221460, 0x221462, 0x221464, 0x221466, 0x221468, 0x22146A, 0x22146C]
            save_3_consumablesListOffsets = [0x221470, 0x221472, 0x221474, 0x221476, 0x221478, 0x221484, 0x221486, 0x221488, 0x22148A, 0x22148C, 0x22148E, 0x221490, 0x221498, 0x22149A, 0x22149C, 0x22149E, 0x2214AC, 0x2214AE, 0x2214B0, 0x2214B2, 0x2214B4, 0x2214C0, 0x2214C2, 0x2214C4, 0x2214C6, 0x2214D4, 0x2214D6, 0x2214D8, 0x2214DA, 0x2214DC, 0x2214DE, 0x2214E0, 0x2214E2, 0x2214E4, 0x2214FC, 0x2214FE, 0x221524, 0x221526, 0x221528, 0x22152A, 0x22152C, 0x22152E, 0x221530, 0x221532, 0x221534, 0x221536, 0x221538, 0x22153A, 0x22153C, 0x22153E, 0x221540, 0x221542, 0x221544, 0x221546, 0x221548, 0x22154A, 0x22154C, 0x22154E, 0x221550, 0x221552, 0x221554, 0x221556, 0x221560, 0x221562, 0x221564, 0x221566, 0x221568, 0x22156A, 0x22156C, 0x22156E, 0x221570, 0x221572, 0x221574, 0x221576, 0x221578, 0x22157A, 0x22157C, 0x22157E, 0x221580, 0x221582, 0x221586, 0x2215C4, 0x2215C6, 0x2215C8, 0x2215CA, 0x2215CC, 0x2215CE, 0x2215D0, 0x2215D2, 0x2215D4, 0x2215D6, 0x2215D8, 0x2215DA, 0x2215DC, 0x2215DE, 0x2215E0, 0x2215E2, 0x2215E4, 0x2215E6, 0x2215E8, 0x2215EA, 0x221628, 0x22162A, 0x22163C, 0x22163E, 0x221640, 0x221646, 0x221648, 0x22164A, 0x221652, 0x22165A, 0x22165C, 0x22165E, 0x22167A, 0x221682, 0x221684, 0x221688, 0x22168C, 0x22168E, 0x221696, 0x2216A0, 0x2216AC, 0x2216AE, 0x2216B0, 0x2216BE, 0x2216C0, 0x2216C2, 0x2216C4, 0x2216D2, 0x2216D4, 0x2216E6, 0x2216E8, 0x2216EA, 0x2216EC, 0x2216FC, 0x221700, 0x221704, 0x221706, 0x22170E, 0x221712, 0x221718, 0x22171A, 0x22172E, 0x221730, 0x221738, 0x22174A, 0x22174C, 0x22174E, 0x221760, 0x221768, 0x22176A, 0x22176C, 0x221772, 0x221774, 0x221776, 0x221778, 0x221786, 0x221788, 0x221792, 0x22179A, 0x22179C, 0x2217A4, 0x2217A6, 0x2217A8, 0x2217AE, 0x2217B0, 0x2217B8, 0x2217BA, 0x2217C2, 0x2217CE, 0x2217D4, 0x2217D6, 0x2217DE, 0x2217E8, 0x2217F2, 0x2217F4, 0x2217FC, 0x221806, 0x221810, 0x221824, 0x22182E, 0x221830, 0x221842, 0x221844, 0x221948, 0x22194A, 0x22194C, 0x22194E, 0x221952, 0x221954, 0x221956, 0x221958]
            save_3_recipesListOffsets = [0x22159E, 0x2215A0, 0x2215A2, 0x2215A4, 0x2215A6, 0x2215A8, 0x2215AA, 0x2215AC, 0x2215AE, 0x2215B0, 0x2215B2, 0x2215B4, 0x2215B6, 0x2215B8, 0x2215BA, 0x2215BC, 0x2215BE]
            save_3_cashmaterialsListOffsets = [0x221790, 0x221794, 0x221858, 0x22185A, 0x22185E, 0x221860, 0x221864, 0x221868, 0x22186A, 0x22186E, 0x221874, 0x221878, 0x22187A, 0x22187E, 0x221884, 0x221888, 0x22188E, 0x221894, 0x221898, 0x22189E, 0x2218A4, 0x2218A8, 0x2218AA, 0x2218AE, 0x2218B4, 0x2218B6, 0x2218B8, 0x2218BA, 0x2218BE, 0x2218C4, 0x2218C8, 0x2218CA, 0x2218CE, 0x2218D4, 0x2218F8, 0x2218FC, 0x221900, 0x221904, 0x221908, 0x22190C, 0x22190E, 0x221910, 0x221914, 0x22195C, 0x22195E, 0x221960]
            save_3_skillcardsListOffsets = [0x221C40, 0x221C42, 0x221C44, 0x221C46, 0x221C48, 0x221C4A, 0x221C4C, 0x221C4E, 0x221C50, 0x221C52, 0x221C54, 0x221C56, 0x221C58, 0x221C5A, 0x221C5C, 0x221C5E, 0x221C60, 0x221C62, 0x221C64, 0x221C66, 0x221C68, 0x221C6A, 0x221C6C, 0x221C6E, 0x221C70, 0x221C72, 0x221C74, 0x221C76, 0x221C78, 0x221C7A, 0x221C7C, 0x221C7E, 0x221C80, 0x221C82, 0x221C84, 0x221C86, 0x221C88, 0x221C8A, 0x221C8C, 0x221C8E, 0x221C90, 0x221C92, 0x221C94, 0x221C96, 0x221C98, 0x221C9A, 0x221C9C, 0x221C9E, 0x221CA0, 0x221CA2, 0x221CA4, 0x221CA6, 0x221CA8, 0x221CAA, 0x221CAC, 0x221CAE, 0x221CB0, 0x221CB2, 0x221CB4, 0x221CB6, 0x221CB8, 0x221CBA, 0x221CBC, 0x221CBE, 0x221CC0, 0x221CC2, 0x221CC4, 0x221CC6, 0x221CC8, 0x221CCA, 0x221CCC, 0x221CCE, 0x221CD0, 0x221CD2, 0x221CD4, 0x221CD6, 0x221CD8, 0x221CDA, 0x221CDC, 0x221CDE, 0x221CE0, 0x221CE2, 0x221CE4, 0x221CE6, 0x221CE8, 0x221CEA, 0x221CEC, 0x221CEE, 0x221CF0, 0x221CF2, 0x221CF4, 0x221CF6, 0x221CF8, 0x221CFA, 0x221CFC, 0x221CFE, 0x221D00, 0x221D02, 0x221D04, 0x221D06, 0x221D08, 0x221D0A, 0x221D0C, 0x221D0E, 0x221D10, 0x221D12, 0x221D14, 0x221D16, 0x221D18, 0x221D1A, 0x221D1C, 0x221D1E, 0x221D20, 0x221D22, 0x221D24, 0x221D26, 0x221D28, 0x221D2A, 0x221D2C, 0x221D2E, 0x221D30, 0x221D32, 0x221D34, 0x221D36, 0x221D38, 0x221D3A, 0x221D3C, 0x221D3E, 0x221D40, 0x221D48, 0x221D50, 0x221D52, 0x221D54, 0x221D56, 0x221D58, 0x221D5A, 0x221D5C, 0x221D5E, 0x221D60, 0x221D62, 0x221D64, 0x221D66, 0x221D68, 0x221D6A, 0x221D6C, 0x221D6E, 0x221D70, 0x221D72, 0x221D74, 0x221D76, 0x221D78, 0x221D7A, 0x221D7C, 0x221D7E, 0x221D80, 0x221D82, 0x221D84, 0x221D86, 0x221D88, 0x221D8A, 0x221D8C, 0x221D8E, 0x221D90, 0x221D92, 0x221D94, 0x221D96, 0x221D98, 0x221D9A, 0x221D9C, 0x221D9E, 0x221DA0, 0x221DA2, 0x221DA4, 0x221DA6, 0x221DA8, 0x221DAA, 0x221DAC, 0x221DAE, 0x221DB0, 0x221DB2, 0x221DB4, 0x221DB6, 0x221DB8, 0x221DBA, 0x221DBC, 0x221DBE, 0x221DC0, 0x221DC2, 0x221DC4, 0x221DC6, 0x221DC8, 0x221DCA, 0x221DCC, 0x221DCE, 0x221DD0, 0x221DD2, 0x221DD4, 0x221DD6, 0x221DD8, 0x221DDA, 0x221DDC, 0x221DDE, 0x221DE0, 0x221DE2, 0x221DE4, 0x221DE6, 0x221DE8, 0x221DEA, 0x221DEC, 0x221DEE, 0x221DF0, 0x221DF2, 0x221DF4, 0x221DF6, 0x221DF8, 0x221DFA, 0x221DFC, 0x221DFE, 0x221E00, 0x221E02, 0x221E04, 0x221E06, 0x221E08, 0x221E0A, 0x221E0C, 0x221E0E, 0x221E10, 0x221E12, 0x221E14, 0x221E16, 0x221E18, 0x221E1A, 0x221E1C, 0x221E1E, 0x221E24, 0x221E26, 0x221E28, 0x221E2A, 0x221E2C, 0x221E2E, 0x221E30, 0x221E32, 0x221E34, 0x221E3A, 0x221E3C, 0x221E3E, 0x221E40, 0x221E42]
            save_3_personaListOffsets = [0x21DD88, 0x21DD8A, 0x21DD8C, 0x21DD8E, 0x21DD90, 0x21DD92, 0x21DD94, 0x21DD96]

            #########################################
            #             Save 4 List               #
            #########################################
            save_4_characterOffsets = [0x2AB136, 0x2AB157]
            save_4_mppbListOffsets = [0x2AB182, 0x2AB186, 0x2AAFD6]
            save_4_weaponListOffsets = [0x2A9BC6, 0x2A9BC8, 0x2A9BCA, 0x2A9BCC, 0x2A9BCE, 0x2A9BD0, 0x2A9BD2, 0x2A9BD4, 0x2A9BD6, 0x2A9BD8, 0x2A9BDA, 0x2A9BDC, 0x2A9BDE, 0x2A9BE0, 0x2A9BE2, 0x2A9BE4, 0x2A9BE6, 0x2A9BE8, 0x2A9BF8, 0x2A9BFA, 0x2A9BFC, 0x2A9BFE, 0x2A9C00, 0x2A9C02, 0x2A9C04, 0x2A9C06, 0x2A9C08, 0x2A9C0A, 0x2A9C0C, 0x2A9C0E, 0x2A9C10, 0x2A9C12, 0x2A9C14, 0x2A9C16, 0x2A9C18, 0x2A9C2A, 0x2A9C2C, 0x2A9C2E, 0x2A9C30, 0x2A9C32, 0x2A9C34, 0x2A9C36, 0x2A9C38, 0x2A9C3A, 0x2A9C3C, 0x2A9C3E, 0x2A9C40, 0x2A9C42, 0x2A9C44, 0x2A9C46, 0x2A9C48, 0x2A9C4A, 0x2A9C4C, 0x2A9C5C, 0x2A9C5E, 0x2A9C60, 0x2A9C62, 0x2A9C64, 0x2A9C66, 0x2A9C68, 0x2A9C6A, 0x2A9C6C, 0x2A9C6E, 0x2A9C70, 0x2A9C72, 0x2A9C74, 0x2A9C76, 0x2A9C78, 0x2A9C7A, 0x2A9C7C, 0x2A9C7E, 0x2A9C8E, 0x2A9C90, 0x2A9C92, 0x2A9C94, 0x2A9C96, 0x2A9C98, 0x2A9C9A, 0x2A9C9C, 0x2A9C9E, 0x2A9CA0, 0x2A9CA2, 0x2A9CA4, 0x2A9CA6, 0x2A9CA8, 0x2A9CAA, 0x2A9CAC, 0x2A9CAE, 0x2A9CB0, 0x2A9CC0, 0x2A9CC2, 0x2A9CC4, 0x2A9CC6, 0x2A9CC8, 0x2A9CCA, 0x2A9CCC, 0x2A9CCE, 0x2A9CD0, 0x2A9CD2, 0x2A9CD4, 0x2A9CD6, 0x2A9CD8, 0x2A9CDA, 0x2A9CDC, 0x2A9CDE, 0x2A9CE0, 0x2A9CE2, 0x2A9CF2, 0x2A9CF4, 0x2A9CF6, 0x2A9CF8, 0x2A9CFA, 0x2A9CFC, 0x2A9CFE, 0x2A9D00, 0x2A9D02, 0x2A9D04, 0x2A9D06, 0x2A9D08, 0x2A9D0A, 0x2A9D0C, 0x2A9D0E, 0x2A9D10, 0x2A9D12, 0x2A9D14, 0x2A9D24, 0x2A9D26, 0x2A9D28, 0x2A9D2A, 0x2A9D2C, 0x2A9D2E, 0x2A9D30, 0x2A9D32, 0x2A9D34, 0x2A9D36, 0x2A9D38, 0x2A9D3A, 0x2A9D3C, 0x2A9D3E, 0x2A9D40, 0x2A9D42, 0x2A9D44, 0x2A9D46, 0x2A9D56, 0x2A9D58, 0x2A9D5A, 0x2A9D5C, 0x2A9D5E, 0x2A9D60, 0x2A9D62, 0x2A9D64, 0x2A9D66, 0x2A9D68, 0x2A9D6A]
            save_4_armorsListOffsets = [0x2A9FAE, 0x2A9FB0, 0x2A9FB2, 0x2A9FB4, 0x2A9FB6, 0x2A9FB8, 0x2A9FBA, 0x2A9FBC, 0x2A9FBE, 0x2A9FC0, 0x2A9FD6, 0x2A9FD8, 0x2A9FDA, 0x2A9FDC, 0x2A9FDE, 0x2A9FE0, 0x2A9FE2, 0x2A9FE4, 0x2A9FE6, 0x2A9FE8, 0x2A9FEA, 0x2A9FEC, 0x2A9FEE, 0x2A9FF0, 0x2A9FFE, 0x2AA000, 0x2AA002, 0x2AA004, 0x2AA006, 0x2AA008, 0x2AA00A, 0x2AA00C, 0x2AA00E, 0x2AA010, 0x2AA012, 0x2AA014, 0x2AA016, 0x2AA018, 0x2AA01A, 0x2AA01C, 0x2AA026, 0x2AA028, 0x2AA02A, 0x2AA02C, 0x2AA02E, 0x2AA030, 0x2AA032, 0x2AA034, 0x2AA036, 0x2AA038, 0x2AA03A, 0x2AA03C, 0x2AA03E, 0x2AA040, 0x2AA042, 0x2AA044, 0x2AA04E, 0x2AA050, 0x2AA052, 0x2AA054, 0x2AA056, 0x2AA058, 0x2AA05A, 0x2AA05C, 0x2AA05E, 0x2AA060, 0x2AA062, 0x2AA064, 0x2AA066, 0x2AA068, 0x2AA06A, 0x2AA076, 0x2AA078, 0x2AA07A, 0x2AA07C]
            save_4_accessoriesListOffsets = [0x2AA13E, 0x2AA140, 0x2AA142, 0x2AA144, 0x2AA146, 0x2AA148, 0x2AA14A, 0x2AA14C, 0x2AA150, 0x2AA152, 0x2AA15E, 0x2AA160, 0x2AA162, 0x2AA164, 0x2AA166, 0x2AA168, 0x2AA16A, 0x2AA16C, 0x2AA16E, 0x2AA170, 0x2AA172, 0x2AA174, 0x2AA176, 0x2AA178, 0x2AA17A, 0x2AA17C, 0x2AA17E, 0x2AA180, 0x2AA182, 0x2AA184, 0x2AA186, 0x2AA188, 0x2AA18A, 0x2AA18C, 0x2AA18E, 0x2AA190, 0x2AA192, 0x2AA194, 0x2AA196, 0x2AA198, 0x2AA19A, 0x2AA19C, 0x2AA19E, 0x2AA1A0, 0x2AA1A2, 0x2AA1A4, 0x2AA1A8, 0x2AA1AA, 0x2AA1AC, 0x2AA1AE, 0x2AA1B0, 0x2AA1B2, 0x2AA1B4, 0x2AA1B6, 0x2AA1B8, 0x2AA1BA, 0x2AA1BC, 0x2AA1BE, 0x2AA1C0, 0x2AA1C2, 0x2AA1C4, 0x2AA1C6, 0x2AA1C8, 0x2AA1CA, 0x2AA1CC, 0x2AA1CE, 0x2AA1D0, 0x2AA1D2, 0x2AA1D4, 0x2AA1D6, 0x2AA1D8, 0x2AA1DA, 0x2AA1DC, 0x2AA1DE, 0x2AA1E0, 0x2AA1E2, 0x2AA1E4, 0x2AA1E6, 0x2AA1EA, 0x2AA1EC, 0x2AA1EE, 0x2AA1F0, 0x2AA1F2, 0x2AA1F4, 0x2AA1F6, 0x2AA1F8, 0x2AA1FE, 0x2AA200, 0x2AA208, 0x2AA20A, 0x2AA20C, 0x2AA20E, 0x2AA210, 0x2AA212, 0x2AA214, 0x2AA216, 0x2AA218, 0x2AA21A, 0x2AA21C, 0x2AA21E, 0x2AA220, 0x2AA222, 0x2AA224, 0x2AA226, 0x2AA228, 0x2AA22E, 0x2AA230, 0x2AA26A, 0x2AA26C, 0x2AA26E, 0x2AA270, 0x2AA272, 0x2AA276, 0x2AA27C, 0x2AA27E, 0x2AA280, 0x2AA28A, 0x2AA28C, 0x2AA28E, 0x2AA290, 0x2AA292, 0x2AA294, 0x2AA296, 0x2AA298, 0x2AA29A, 0x2AA29C, 0x2AA29E, 0x2AA2A0, 0x2AA2A2]
            save_4_consumablesListOffsets = [0x2AA2A6, 0x2AA2A8, 0x2AA2AA, 0x2AA2AC, 0x2AA2AE, 0x2AA2BA, 0x2AA2BC, 0x2AA2BE, 0x2AA2C0, 0x2AA2C2, 0x2AA2C4, 0x2AA2C6, 0x2AA2CE, 0x2AA2D0, 0x2AA2D2, 0x2AA2D4, 0x2AA2E2, 0x2AA2E4, 0x2AA2E6, 0x2AA2E8, 0x2AA2EA, 0x2AA2F6, 0x2AA2F8, 0x2AA2FA, 0x2AA2FC, 0x2AA30A, 0x2AA30C, 0x2AA30E, 0x2AA310, 0x2AA312, 0x2AA314, 0x2AA316, 0x2AA318, 0x2AA31A, 0x2AA332, 0x2AA334, 0x2AA35A, 0x2AA35C, 0x2AA35E, 0x2AA360, 0x2AA362, 0x2AA364, 0x2AA366, 0x2AA368, 0x2AA36A, 0x2AA36C, 0x2AA36E, 0x2AA370, 0x2AA372, 0x2AA374, 0x2AA376, 0x2AA378, 0x2AA37A, 0x2AA37C, 0x2AA37E, 0x2AA380, 0x2AA382, 0x2AA384, 0x2AA386, 0x2AA388, 0x2AA38A, 0x2AA38C, 0x2AA396, 0x2AA398, 0x2AA39A, 0x2AA39C, 0x2AA39E, 0x2AA3A0, 0x2AA3A2, 0x2AA3A4, 0x2AA3A6, 0x2AA3A8, 0x2AA3AA, 0x2AA3AC, 0x2AA3AE, 0x2AA3B0, 0x2AA3B2, 0x2AA3B4, 0x2AA3B6, 0x2AA3B8, 0x2AA3BC, 0x2AA3FA, 0x2AA3FC, 0x2AA3FE, 0x2AA400, 0x2AA402, 0x2AA404, 0x2AA406, 0x2AA408, 0x2AA40A, 0x2AA40C, 0x2AA40E, 0x2AA410, 0x2AA412, 0x2AA414, 0x2AA416, 0x2AA418, 0x2AA41A, 0x2AA41C, 0x2AA41E, 0x2AA420, 0x2AA45E, 0x2AA460, 0x2AA472, 0x2AA474, 0x2AA476, 0x2AA47C, 0x2AA47E, 0x2AA480, 0x2AA488, 0x2AA490, 0x2AA492, 0x2AA494, 0x2AA4B0, 0x2AA4B8, 0x2AA4BA, 0x2AA4BE, 0x2AA4C2, 0x2AA4C4, 0x2AA4CC, 0x2AA4D6, 0x2AA4E2, 0x2AA4E4, 0x2AA4E6, 0x2AA4F4, 0x2AA4F6, 0x2AA4F8, 0x2AA4FA, 0x2AA508, 0x2AA50A, 0x2AA51C, 0x2AA51E, 0x2AA520, 0x2AA522, 0x2AA532, 0x2AA536, 0x2AA53A, 0x2AA53C, 0x2AA544, 0x2AA548, 0x2AA54E, 0x2AA550, 0x2AA564, 0x2AA566, 0x2AA56E, 0x2AA580, 0x2AA582, 0x2AA584, 0x2AA596, 0x2AA59E, 0x2AA5A0, 0x2AA5A2, 0x2AA5A8, 0x2AA5AA, 0x2AA5AC, 0x2AA5AE, 0x2AA5BC, 0x2AA5BE, 0x2AA5C8, 0x2AA5D0, 0x2AA5D2, 0x2AA5DA, 0x2AA5DC, 0x2AA5DE, 0x2AA5E4, 0x2AA5E6, 0x2AA5EE, 0x2AA5F0, 0x2AA5F8, 0x2AA604, 0x2AA60A, 0x2AA60C, 0x2AA614, 0x2AA61E, 0x2AA628, 0x2AA62A, 0x2AA632, 0x2AA63C, 0x2AA646, 0x2AA65A, 0x2AA664, 0x2AA666, 0x2AA678, 0x2AA67A, 0x2AA77E, 0x2AA780, 0x2AA782, 0x2AA784, 0x2AA788, 0x2AA78A, 0x2AA78C, 0x2AA78E]
            save_4_recipesListOffsets = [0x2AA3D4, 0x2AA3D6, 0x2AA3D8, 0x2AA3DA, 0x2AA3DC, 0x2AA3DE, 0x2AA3E0, 0x2AA3E2, 0x2AA3E4, 0x2AA3E6, 0x2AA3E8, 0x2AA3EA, 0x2AA3EC, 0x2AA3EE, 0x2AA3F0, 0x2AA3F2, 0x2AA3F4]
            save_4_cashmaterialsListOffsets = [0x2AA5C6, 0x2AA5CA, 0x2AA68E, 0x2AA690, 0x2AA694, 0x2AA696, 0x2AA69A, 0x2AA69E, 0x2AA6A0, 0x2AA6A4, 0x2AA6AA, 0x2AA6AE, 0x2AA6B0, 0x2AA6B4, 0x2AA6BA, 0x2AA6BE, 0x2AA6C4, 0x2AA6CA, 0x2AA6CE, 0x2AA6D4, 0x2AA6DA, 0x2AA6DE, 0x2AA6E0, 0x2AA6E4, 0x2AA6EA, 0x2AA6EC, 0x2AA6EE, 0x2AA6F0, 0x2AA6F4, 0x2AA6FA, 0x2AA6FE, 0x2AA700, 0x2AA704, 0x2AA70A, 0x2AA72E, 0x2AA732, 0x2AA736, 0x2AA73A, 0x2AA73E, 0x2AA742, 0x2AA744, 0x2AA746, 0x2AA74A, 0x2AA792, 0x2AA794, 0x2AA796]
            save_4_skillcardsListOffsets = [0x2AAA76, 0x2AAA78, 0x2AAA7A, 0x2AAA7C, 0x2AAA7E, 0x2AAA80, 0x2AAA82, 0x2AAA84, 0x2AAA86, 0x2AAA88, 0x2AAA8A, 0x2AAA8C, 0x2AAA8E, 0x2AAA90, 0x2AAA92, 0x2AAA94, 0x2AAA96, 0x2AAA98, 0x2AAA9A, 0x2AAA9C, 0x2AAA9E, 0x2AAAA0, 0x2AAAA2, 0x2AAAA4, 0x2AAAA6, 0x2AAAA8, 0x2AAAAA, 0x2AAAAC, 0x2AAAAE, 0x2AAAB0, 0x2AAAB2, 0x2AAAB4, 0x2AAAB6, 0x2AAAB8, 0x2AAABA, 0x2AAABC, 0x2AAABE, 0x2AAAC0, 0x2AAAC2, 0x2AAAC4, 0x2AAAC6, 0x2AAAC8, 0x2AAACA, 0x2AAACC, 0x2AAACE, 0x2AAAD0, 0x2AAAD2, 0x2AAAD4, 0x2AAAD6, 0x2AAAD8, 0x2AAADA, 0x2AAADC, 0x2AAADE, 0x2AAAE0, 0x2AAAE2, 0x2AAAE4, 0x2AAAE6, 0x2AAAE8, 0x2AAAEA, 0x2AAAEC, 0x2AAAEE, 0x2AAAF0, 0x2AAAF2, 0x2AAAF4, 0x2AAAF6, 0x2AAAF8, 0x2AAAFA, 0x2AAAFC, 0x2AAAFE, 0x2AAB00, 0x2AAB02, 0x2AAB04, 0x2AAB06, 0x2AAB08, 0x2AAB0A, 0x2AAB0C, 0x2AAB0E, 0x2AAB10, 0x2AAB12, 0x2AAB14, 0x2AAB16, 0x2AAB18, 0x2AAB1A, 0x2AAB1C, 0x2AAB1E, 0x2AAB20, 0x2AAB22, 0x2AAB24, 0x2AAB26, 0x2AAB28, 0x2AAB2A, 0x2AAB2C, 0x2AAB2E, 0x2AAB30, 0x2AAB32, 0x2AAB34, 0x2AAB36, 0x2AAB38, 0x2AAB3A, 0x2AAB3C, 0x2AAB3E, 0x2AAB40, 0x2AAB42, 0x2AAB44, 0x2AAB46, 0x2AAB48, 0x2AAB4A, 0x2AAB4C, 0x2AAB4E, 0x2AAB50, 0x2AAB52, 0x2AAB54, 0x2AAB56, 0x2AAB58, 0x2AAB5A, 0x2AAB5C, 0x2AAB5E, 0x2AAB60, 0x2AAB62, 0x2AAB64, 0x2AAB66, 0x2AAB68, 0x2AAB6A, 0x2AAB6C, 0x2AAB6E, 0x2AAB70, 0x2AAB72, 0x2AAB74, 0x2AAB76, 0x2AAB7E, 0x2AAB86, 0x2AAB88, 0x2AAB8A, 0x2AAB8C, 0x2AAB8E, 0x2AAB90, 0x2AAB92, 0x2AAB94, 0x2AAB96, 0x2AAB98, 0x2AAB9A, 0x2AAB9C, 0x2AAB9E, 0x2AABA0, 0x2AABA2, 0x2AABA4, 0x2AABA6, 0x2AABA8, 0x2AABAA, 0x2AABAC, 0x2AABAE, 0x2AABB0, 0x2AABB2, 0x2AABB4, 0x2AABB6, 0x2AABB8, 0x2AABBA, 0x2AABBC, 0x2AABBE, 0x2AABC0, 0x2AABC2, 0x2AABC4, 0x2AABC6, 0x2AABC8, 0x2AABCA, 0x2AABCC, 0x2AABCE, 0x2AABD0, 0x2AABD2, 0x2AABD4, 0x2AABD6, 0x2AABD8, 0x2AABDA, 0x2AABDC, 0x2AABDE, 0x2AABE0, 0x2AABE2, 0x2AABE4, 0x2AABE6, 0x2AABE8, 0x2AABEA, 0x2AABEC, 0x2AABEE, 0x2AABF0, 0x2AABF2, 0x2AABF4, 0x2AABF6, 0x2AABF8, 0x2AABFA, 0x2AABFC, 0x2AABFE, 0x2AAC00, 0x2AAC02, 0x2AAC04, 0x2AAC06, 0x2AAC08, 0x2AAC0A, 0x2AAC0C, 0x2AAC0E, 0x2AAC10, 0x2AAC12, 0x2AAC14, 0x2AAC16, 0x2AAC18, 0x2AAC1A, 0x2AAC1C, 0x2AAC1E, 0x2AAC20, 0x2AAC22, 0x2AAC24, 0x2AAC26, 0x2AAC28, 0x2AAC2A, 0x2AAC2C, 0x2AAC2E, 0x2AAC30, 0x2AAC32, 0x2AAC34, 0x2AAC36, 0x2AAC38, 0x2AAC3A, 0x2AAC3C, 0x2AAC3E, 0x2AAC40, 0x2AAC42, 0x2AAC44, 0x2AAC46, 0x2AAC48, 0x2AAC4A, 0x2AAC4C, 0x2AAC4E, 0x2AAC50, 0x2AAC52, 0x2AAC54, 0x2AAC5A, 0x2AAC5C, 0x2AAC5E, 0x2AAC60, 0x2AAC62, 0x2AAC64, 0x2AAC66, 0x2AAC68, 0x2AAC6A, 0x2AAC70, 0x2AAC72, 0x2AAC74, 0x2AAC76, 0x2AAC78]
            save_4_personaListOffsets = [0x2A6BBE, 0x2A6BC0, 0x2A6BC2, 0x2A6BC4, 0x2A6BC6, 0x2A6BC8, 0x2A6BCA, 0x2A6BCC]

            #########################################
            #             Save 5 List               #
            #########################################
            save_5_characterOffsets = [0x333F6C, 0x333F8D]
            save_5_mppbListOffsets = [0x333FB8, 0x333FBC, 0x333E0C]
            save_5_weaponListOffsets = [0x3329FC, 0x3329FE, 0x332A00, 0x332A02, 0x332A04, 0x332A06, 0x332A08, 0x332A0A, 0x332A0C, 0x332A0E, 0x332A10, 0x332A12, 0x332A14, 0x332A16, 0x332A18, 0x332A1A, 0x332A1C, 0x332A1E, 0x332A2E, 0x332A30, 0x332A32, 0x332A34, 0x332A36, 0x332A38, 0x332A3A, 0x332A3C, 0x332A3E, 0x332A40, 0x332A42, 0x332A44, 0x332A46, 0x332A48, 0x332A4A, 0x332A4C, 0x332A4E, 0x332A60, 0x332A62, 0x332A64, 0x332A66, 0x332A68, 0x332A6A, 0x332A6C, 0x332A6E, 0x332A70, 0x332A72, 0x332A74, 0x332A76, 0x332A78, 0x332A7A, 0x332A7C, 0x332A7E, 0x332A80, 0x332A82, 0x332A92, 0x332A94, 0x332A96, 0x332A98, 0x332A9A, 0x332A9C, 0x332A9E, 0x332AA0, 0x332AA2, 0x332AA4, 0x332AA6, 0x332AA8, 0x332AAA, 0x332AAC, 0x332AAE, 0x332AB0, 0x332AB2, 0x332AB4, 0x332AC4, 0x332AC6, 0x332AC8, 0x332ACA, 0x332ACC, 0x332ACE, 0x332AD0, 0x332AD2, 0x332AD4, 0x332AD6, 0x332AD8, 0x332ADA, 0x332ADC, 0x332ADE, 0x332AE0, 0x332AE2, 0x332AE4, 0x332AE6, 0x332AF6, 0x332AF8, 0x332AFA, 0x332AFC, 0x332AFE, 0x332B00, 0x332B02, 0x332B04, 0x332B06, 0x332B08, 0x332B0A, 0x332B0C, 0x332B0E, 0x332B10, 0x332B12, 0x332B14, 0x332B16, 0x332B18, 0x332B28, 0x332B2A, 0x332B2C, 0x332B2E, 0x332B30, 0x332B32, 0x332B34, 0x332B36, 0x332B38, 0x332B3A, 0x332B3C, 0x332B3E, 0x332B40, 0x332B42, 0x332B44, 0x332B46, 0x332B48, 0x332B4A, 0x332B5A, 0x332B5C, 0x332B5E, 0x332B60, 0x332B62, 0x332B64, 0x332B66, 0x332B68, 0x332B6A, 0x332B6C, 0x332B6E, 0x332B70, 0x332B72, 0x332B74, 0x332B76, 0x332B78, 0x332B7A, 0x332B7C, 0x332B8C, 0x332B8E, 0x332B90, 0x332B92, 0x332B94, 0x332B96, 0x332B98, 0x332B9A, 0x332B9C, 0x332B9E, 0x332BA0]
            save_5_armorsListOffsets = [0x332DE4, 0x332DE6, 0x332DE8, 0x332DEA, 0x332DEC, 0x332DEE, 0x332DF0, 0x332DF2, 0x332DF4, 0x332DF6, 0x332E0C, 0x332E0E, 0x332E10, 0x332E12, 0x332E14, 0x332E16, 0x332E18, 0x332E1A, 0x332E1C, 0x332E1E, 0x332E20, 0x332E22, 0x332E24, 0x332E26, 0x332E34, 0x332E36, 0x332E38, 0x332E3A, 0x332E3C, 0x332E3E, 0x332E40, 0x332E42, 0x332E44, 0x332E46, 0x332E48, 0x332E4A, 0x332E4C, 0x332E4E, 0x332E50, 0x332E52, 0x332E5C, 0x332E5E, 0x332E60, 0x332E62, 0x332E64, 0x332E66, 0x332E68, 0x332E6A, 0x332E6C, 0x332E6E, 0x332E70, 0x332E72, 0x332E74, 0x332E76, 0x332E78, 0x332E7A, 0x332E84, 0x332E86, 0x332E88, 0x332E8A, 0x332E8C, 0x332E8E, 0x332E90, 0x332E92, 0x332E94, 0x332E96, 0x332E98, 0x332E9A, 0x332E9C, 0x332E9E, 0x332EA0, 0x332EAC, 0x332EAE, 0x332EB0, 0x332EB2]
            save_5_accessoriesListOffsets = [0x332F74, 0x332F76, 0x332F78, 0x332F7A, 0x332F7C, 0x332F7E, 0x332F80, 0x332F82, 0x332F86, 0x332F88, 0x332F94, 0x332F96, 0x332F98, 0x332F9A, 0x332F9C, 0x332F9E, 0x332FA0, 0x332FA2, 0x332FA4, 0x332FA6, 0x332FA8, 0x332FAA, 0x332FAC, 0x332FAE, 0x332FB0, 0x332FB2, 0x332FB4, 0x332FB6, 0x332FB8, 0x332FBA, 0x332FBC, 0x332FBE, 0x332FC0, 0x332FC2, 0x332FC4, 0x332FC6, 0x332FC8, 0x332FCA, 0x332FCC, 0x332FCE, 0x332FD0, 0x332FD2, 0x332FD4, 0x332FD6, 0x332FD8, 0x332FDA, 0x332FDE, 0x332FE0, 0x332FE2, 0x332FE4, 0x332FE6, 0x332FE8, 0x332FEA, 0x332FEC, 0x332FEE, 0x332FF0, 0x332FF2, 0x332FF4, 0x332FF6, 0x332FF8, 0x332FFA, 0x332FFC, 0x332FFE, 0x333000, 0x333002, 0x333004, 0x333006, 0x333008, 0x33300A, 0x33300C, 0x33300E, 0x333010, 0x333012, 0x333014, 0x333016, 0x333018, 0x33301A, 0x33301C, 0x333020, 0x333022, 0x333024, 0x333026, 0x333028, 0x33302A, 0x33302C, 0x33302E, 0x333034, 0x333036, 0x33303E, 0x333040, 0x333042, 0x333044, 0x333046, 0x333048, 0x33304A, 0x33304C, 0x33304E, 0x333050, 0x333052, 0x333054, 0x333056, 0x333058, 0x33305A, 0x33305C, 0x33305E, 0x333064, 0x333066, 0x3330A0, 0x3330A2, 0x3330A4, 0x3330A6, 0x3330A8, 0x3330AC, 0x3330B2, 0x3330B4, 0x3330B6, 0x3330C0, 0x3330C2, 0x3330C4, 0x3330C6, 0x3330C8, 0x3330CA, 0x3330CC, 0x3330CE, 0x3330D0, 0x3330D2, 0x3330D4, 0x3330D6, 0x3330D8]
            save_5_consumablesListOffsets = [0x3330DC, 0x3330DE, 0x3330E0, 0x3330E2, 0x3330E4, 0x3330F0, 0x3330F2, 0x3330F4, 0x3330F6, 0x3330F8, 0x3330FA, 0x3330FC, 0x333104, 0x333106, 0x333108, 0x33310A, 0x333118, 0x33311A, 0x33311C, 0x33311E, 0x333120, 0x33312C, 0x33312E, 0x333130, 0x333132, 0x333140, 0x333142, 0x333144, 0x333146, 0x333148, 0x33314A, 0x33314C, 0x33314E, 0x333150, 0x333168, 0x33316A, 0x333190, 0x333192, 0x333194, 0x333196, 0x333198, 0x33319A, 0x33319C, 0x33319E, 0x3331A0, 0x3331A2, 0x3331A4, 0x3331A6, 0x3331A8, 0x3331AA, 0x3331AC, 0x3331AE, 0x3331B0, 0x3331B2, 0x3331B4, 0x3331B6, 0x3331B8, 0x3331BA, 0x3331BC, 0x3331BE, 0x3331C0, 0x3331C2, 0x3331CC, 0x3331CE, 0x3331D0, 0x3331D2, 0x3331D4, 0x3331D6, 0x3331D8, 0x3331DA, 0x3331DC, 0x3331DE, 0x3331E0, 0x3331E2, 0x3331E4, 0x3331E6, 0x3331E8, 0x3331EA, 0x3331EC, 0x3331EE, 0x3331F2, 0x333230, 0x333232, 0x333234, 0x333236, 0x333238, 0x33323A, 0x33323C, 0x33323E, 0x333240, 0x333242, 0x333244, 0x333246, 0x333248, 0x33324A, 0x33324C, 0x33324E, 0x333250, 0x333252, 0x333254, 0x333256, 0x333294, 0x333296, 0x3332A8, 0x3332AA, 0x3332AC, 0x3332B2, 0x3332B4, 0x3332B6, 0x3332BE, 0x3332C6, 0x3332C8, 0x3332CA, 0x3332E6, 0x3332EE, 0x3332F0, 0x3332F4, 0x3332F8, 0x3332FA, 0x333302, 0x33330C, 0x333318, 0x33331A, 0x33331C, 0x33332A, 0x33332C, 0x33332E, 0x333330, 0x33333E, 0x333340, 0x333352, 0x333354, 0x333356, 0x333358, 0x333368, 0x33336C, 0x333370, 0x333372, 0x33337A, 0x33337E, 0x333384, 0x333386, 0x33339A, 0x33339C, 0x3333A4, 0x3333B6, 0x3333B8, 0x3333BA, 0x3333CC, 0x3333D4, 0x3333D6, 0x3333D8, 0x3333DE, 0x3333E0, 0x3333E2, 0x3333E4, 0x3333F2, 0x3333F4, 0x3333FE, 0x333406, 0x333408, 0x333410, 0x333412, 0x333414, 0x33341A, 0x33341C, 0x333424, 0x333426, 0x33342E, 0x33343A, 0x333440, 0x333442, 0x33344A, 0x333454, 0x33345E, 0x333460, 0x333468, 0x333472, 0x33347C, 0x333490, 0x33349A, 0x33349C, 0x3334AE, 0x3334B0, 0x3335B4, 0x3335B6, 0x3335B8, 0x3335BA, 0x3335BE, 0x3335C0, 0x3335C2, 0x3335C4]
            save_5_recipesListOffsets = [0x33320A, 0x33320C, 0x33320E, 0x333210, 0x333212, 0x333214, 0x333216, 0x333218, 0x33321A, 0x33321C, 0x33321E, 0x333220, 0x333222, 0x333224, 0x333226, 0x333228, 0x33322A]
            save_5_cashmaterialsListOffsets = [0x3333FC, 0x333400, 0x3334C4, 0x3334C6, 0x3334CA, 0x3334CC, 0x3334D0, 0x3334D4, 0x3334D6, 0x3334DA, 0x3334E0, 0x3334E4, 0x3334E6, 0x3334EA, 0x3334F0, 0x3334F4, 0x3334FA, 0x333500, 0x333504, 0x33350A, 0x333510, 0x333514, 0x333516, 0x33351A, 0x333520, 0x333522, 0x333524, 0x333526, 0x33352A, 0x333530, 0x333534, 0x333536, 0x33353A, 0x333540, 0x333564, 0x333568, 0x33356C, 0x333570, 0x333574, 0x333578, 0x33357A, 0x33357C, 0x333580, 0x3335C8, 0x3335CA, 0x3335CC]
            save_5_skillcardsListOffsets = [0x3338AC, 0x3338AE, 0x3338B0, 0x3338B2, 0x3338B4, 0x3338B6, 0x3338B8, 0x3338BA, 0x3338BC, 0x3338BE, 0x3338C0, 0x3338C2, 0x3338C4, 0x3338C6, 0x3338C8, 0x3338CA, 0x3338CC, 0x3338CE, 0x3338D0, 0x3338D2, 0x3338D4, 0x3338D6, 0x3338D8, 0x3338DA, 0x3338DC, 0x3338DE, 0x3338E0, 0x3338E2, 0x3338E4, 0x3338E6, 0x3338E8, 0x3338EA, 0x3338EC, 0x3338EE, 0x3338F0, 0x3338F2, 0x3338F4, 0x3338F6, 0x3338F8, 0x3338FA, 0x3338FC, 0x3338FE, 0x333900, 0x333902, 0x333904, 0x333906, 0x333908, 0x33390A, 0x33390C, 0x33390E, 0x333910, 0x333912, 0x333914, 0x333916, 0x333918, 0x33391A, 0x33391C, 0x33391E, 0x333920, 0x333922, 0x333924, 0x333926, 0x333928, 0x33392A, 0x33392C, 0x33392E, 0x333930, 0x333932, 0x333934, 0x333936, 0x333938, 0x33393A, 0x33393C, 0x33393E, 0x333940, 0x333942, 0x333944, 0x333946, 0x333948, 0x33394A, 0x33394C, 0x33394E, 0x333950, 0x333952, 0x333954, 0x333956, 0x333958, 0x33395A, 0x33395C, 0x33395E, 0x333960, 0x333962, 0x333964, 0x333966, 0x333968, 0x33396A, 0x33396C, 0x33396E, 0x333970, 0x333972, 0x333974, 0x333976, 0x333978, 0x33397A, 0x33397C, 0x33397E, 0x333980, 0x333982, 0x333984, 0x333986, 0x333988, 0x33398A, 0x33398C, 0x33398E, 0x333990, 0x333992, 0x333994, 0x333996, 0x333998, 0x33399A, 0x33399C, 0x33399E, 0x3339A0, 0x3339A2, 0x3339A4, 0x3339A6, 0x3339A8, 0x3339AA, 0x3339AC, 0x3339B4, 0x3339BC, 0x3339BE, 0x3339C0, 0x3339C2, 0x3339C4, 0x3339C6, 0x3339C8, 0x3339CA, 0x3339CC, 0x3339CE, 0x3339D0, 0x3339D2, 0x3339D4, 0x3339D6, 0x3339D8, 0x3339DA, 0x3339DC, 0x3339DE, 0x3339E0, 0x3339E2, 0x3339E4, 0x3339E6, 0x3339E8, 0x3339EA, 0x3339EC, 0x3339EE, 0x3339F0, 0x3339F2, 0x3339F4, 0x3339F6, 0x3339F8, 0x3339FA, 0x3339FC, 0x3339FE, 0x333A00, 0x333A02, 0x333A04, 0x333A06, 0x333A08, 0x333A0A, 0x333A0C, 0x333A0E, 0x333A10, 0x333A12, 0x333A14, 0x333A16, 0x333A18, 0x333A1A, 0x333A1C, 0x333A1E, 0x333A20, 0x333A22, 0x333A24, 0x333A26, 0x333A28, 0x333A2A, 0x333A2C, 0x333A2E, 0x333A30, 0x333A32, 0x333A34, 0x333A36, 0x333A38, 0x333A3A, 0x333A3C, 0x333A3E, 0x333A40, 0x333A42, 0x333A44, 0x333A46, 0x333A48, 0x333A4A, 0x333A4C, 0x333A4E, 0x333A50, 0x333A52, 0x333A54, 0x333A56, 0x333A58, 0x333A5A, 0x333A5C, 0x333A5E, 0x333A60, 0x333A62, 0x333A64, 0x333A66, 0x333A68, 0x333A6A, 0x333A6C, 0x333A6E, 0x333A70, 0x333A72, 0x333A74, 0x333A76, 0x333A78, 0x333A7A, 0x333A7C, 0x333A7E, 0x333A80, 0x333A82, 0x333A84, 0x333A86, 0x333A88, 0x333A8A, 0x333A90, 0x333A92, 0x333A94, 0x333A96, 0x333A98, 0x333A9A, 0x333A9C, 0x333A9E, 0x333AA0, 0x333AA6, 0x333AA8, 0x333AAA, 0x333AAC, 0x333AAE]
            save_5_personaListOffsets = [0x32F9F4, 0x32F9F6, 0x32F9F8, 0x32F9FA, 0x32F9FC, 0x32F9FE, 0x32FA00, 0x32FA02]

            #########################################
            #             Save 6 List               #
            #########################################
            save_6_characterOffsets = [0x3BCDA2, 0x3BCDC3]
            save_6_mppbListOffsets = [0x3BCDEE, 0x3BCDF2, 0x3BCC42]
            save_6_weaponListOffsets = [0x3BB832, 0x3BB834, 0x3BB836, 0x3BB838, 0x3BB83A, 0x3BB83C, 0x3BB83E, 0x3BB840, 0x3BB842, 0x3BB844, 0x3BB846, 0x3BB848, 0x3BB84A, 0x3BB84C, 0x3BB84E, 0x3BB850, 0x3BB852, 0x3BB854, 0x3BB864, 0x3BB866, 0x3BB868, 0x3BB86A, 0x3BB86C, 0x3BB86E, 0x3BB870, 0x3BB872, 0x3BB874, 0x3BB876, 0x3BB878, 0x3BB87A, 0x3BB87C, 0x3BB87E, 0x3BB880, 0x3BB882, 0x3BB884, 0x3BB896, 0x3BB898, 0x3BB89A, 0x3BB89C, 0x3BB89E, 0x3BB8A0, 0x3BB8A2, 0x3BB8A4, 0x3BB8A6, 0x3BB8A8, 0x3BB8AA, 0x3BB8AC, 0x3BB8AE, 0x3BB8B0, 0x3BB8B2, 0x3BB8B4, 0x3BB8B6, 0x3BB8B8, 0x3BB8C8, 0x3BB8CA, 0x3BB8CC, 0x3BB8CE, 0x3BB8D0, 0x3BB8D2, 0x3BB8D4, 0x3BB8D6, 0x3BB8D8, 0x3BB8DA, 0x3BB8DC, 0x3BB8DE, 0x3BB8E0, 0x3BB8E2, 0x3BB8E4, 0x3BB8E6, 0x3BB8E8, 0x3BB8EA, 0x3BB8FA, 0x3BB8FC, 0x3BB8FE, 0x3BB900, 0x3BB902, 0x3BB904, 0x3BB906, 0x3BB908, 0x3BB90A, 0x3BB90C, 0x3BB90E, 0x3BB910, 0x3BB912, 0x3BB914, 0x3BB916, 0x3BB918, 0x3BB91A, 0x3BB91C, 0x3BB92C, 0x3BB92E, 0x3BB930, 0x3BB932, 0x3BB934, 0x3BB936, 0x3BB938, 0x3BB93A, 0x3BB93C, 0x3BB93E, 0x3BB940, 0x3BB942, 0x3BB944, 0x3BB946, 0x3BB948, 0x3BB94A, 0x3BB94C, 0x3BB94E, 0x3BB95E, 0x3BB960, 0x3BB962, 0x3BB964, 0x3BB966, 0x3BB968, 0x3BB96A, 0x3BB96C, 0x3BB96E, 0x3BB970, 0x3BB972, 0x3BB974, 0x3BB976, 0x3BB978, 0x3BB97A, 0x3BB97C, 0x3BB97E, 0x3BB980, 0x3BB990, 0x3BB992, 0x3BB994, 0x3BB996, 0x3BB998, 0x3BB99A, 0x3BB99C, 0x3BB99E, 0x3BB9A0, 0x3BB9A2, 0x3BB9A4, 0x3BB9A6, 0x3BB9A8, 0x3BB9AA, 0x3BB9AC, 0x3BB9AE, 0x3BB9B0, 0x3BB9B2, 0x3BB9C2, 0x3BB9C4, 0x3BB9C6, 0x3BB9C8, 0x3BB9CA, 0x3BB9CC, 0x3BB9CE, 0x3BB9D0, 0x3BB9D2, 0x3BB9D4, 0x3BB9D6]
            save_6_armorsListOffsets = [0x3BBC1A, 0x3BBC1C, 0x3BBC1E, 0x3BBC20, 0x3BBC22, 0x3BBC24, 0x3BBC26, 0x3BBC28, 0x3BBC2A, 0x3BBC2C, 0x3BBC42, 0x3BBC44, 0x3BBC46, 0x3BBC48, 0x3BBC4A, 0x3BBC4C, 0x3BBC4E, 0x3BBC50, 0x3BBC52, 0x3BBC54, 0x3BBC56, 0x3BBC58, 0x3BBC5A, 0x3BBC5C, 0x3BBC6A, 0x3BBC6C, 0x3BBC6E, 0x3BBC70, 0x3BBC72, 0x3BBC74, 0x3BBC76, 0x3BBC78, 0x3BBC7A, 0x3BBC7C, 0x3BBC7E, 0x3BBC80, 0x3BBC82, 0x3BBC84, 0x3BBC86, 0x3BBC88, 0x3BBC92, 0x3BBC94, 0x3BBC96, 0x3BBC98, 0x3BBC9A, 0x3BBC9C, 0x3BBC9E, 0x3BBCA0, 0x3BBCA2, 0x3BBCA4, 0x3BBCA6, 0x3BBCA8, 0x3BBCAA, 0x3BBCAC, 0x3BBCAE, 0x3BBCB0, 0x3BBCBA, 0x3BBCBC, 0x3BBCBE, 0x3BBCC0, 0x3BBCC2, 0x3BBCC4, 0x3BBCC6, 0x3BBCC8, 0x3BBCCA, 0x3BBCCC, 0x3BBCCE, 0x3BBCD0, 0x3BBCD2, 0x3BBCD4, 0x3BBCD6, 0x3BBCE2, 0x3BBCE4, 0x3BBCE6, 0x3BBCE8]
            save_6_accessoriesListOffsets = [0x3BBDAA, 0x3BBDAC, 0x3BBDAE, 0x3BBDB0, 0x3BBDB2, 0x3BBDB4, 0x3BBDB6, 0x3BBDB8, 0x3BBDBC, 0x3BBDBE, 0x3BBDCA, 0x3BBDCC, 0x3BBDCE, 0x3BBDD0, 0x3BBDD2, 0x3BBDD4, 0x3BBDD6, 0x3BBDD8, 0x3BBDDA, 0x3BBDDC, 0x3BBDDE, 0x3BBDE0, 0x3BBDE2, 0x3BBDE4, 0x3BBDE6, 0x3BBDE8, 0x3BBDEA, 0x3BBDEC, 0x3BBDEE, 0x3BBDF0, 0x3BBDF2, 0x3BBDF4, 0x3BBDF6, 0x3BBDF8, 0x3BBDFA, 0x3BBDFC, 0x3BBDFE, 0x3BBE00, 0x3BBE02, 0x3BBE04, 0x3BBE06, 0x3BBE08, 0x3BBE0A, 0x3BBE0C, 0x3BBE0E, 0x3BBE10, 0x3BBE14, 0x3BBE16, 0x3BBE18, 0x3BBE1A, 0x3BBE1C, 0x3BBE1E, 0x3BBE20, 0x3BBE22, 0x3BBE24, 0x3BBE26, 0x3BBE28, 0x3BBE2A, 0x3BBE2C, 0x3BBE2E, 0x3BBE30, 0x3BBE32, 0x3BBE34, 0x3BBE36, 0x3BBE38, 0x3BBE3A, 0x3BBE3C, 0x3BBE3E, 0x3BBE40, 0x3BBE42, 0x3BBE44, 0x3BBE46, 0x3BBE48, 0x3BBE4A, 0x3BBE4C, 0x3BBE4E, 0x3BBE50, 0x3BBE52, 0x3BBE56, 0x3BBE58, 0x3BBE5A, 0x3BBE5C, 0x3BBE5E, 0x3BBE60, 0x3BBE62, 0x3BBE64, 0x3BBE6A, 0x3BBE6C, 0x3BBE74, 0x3BBE76, 0x3BBE78, 0x3BBE7A, 0x3BBE7C, 0x3BBE7E, 0x3BBE80, 0x3BBE82, 0x3BBE84, 0x3BBE86, 0x3BBE88, 0x3BBE8A, 0x3BBE8C, 0x3BBE8E, 0x3BBE90, 0x3BBE92, 0x3BBE94, 0x3BBE9A, 0x3BBE9C, 0x3BBED6, 0x3BBED8, 0x3BBEDA, 0x3BBEDC, 0x3BBEDE, 0x3BBEE2, 0x3BBEE8, 0x3BBEEA, 0x3BBEEC, 0x3BBEF6, 0x3BBEF8, 0x3BBEFA, 0x3BBEFC, 0x3BBEFE, 0x3BBF00, 0x3BBF02, 0x3BBF04, 0x3BBF06, 0x3BBF08, 0x3BBF0A, 0x3BBF0C, 0x3BBF0E]
            save_6_consumablesListOffsets = [0x3BBF12, 0x3BBF14, 0x3BBF16, 0x3BBF18, 0x3BBF1A, 0x3BBF26, 0x3BBF28, 0x3BBF2A, 0x3BBF2C, 0x3BBF2E, 0x3BBF30, 0x3BBF32, 0x3BBF3A, 0x3BBF3C, 0x3BBF3E, 0x3BBF40, 0x3BBF4E, 0x3BBF50, 0x3BBF52, 0x3BBF54, 0x3BBF56, 0x3BBF62, 0x3BBF64, 0x3BBF66, 0x3BBF68, 0x3BBF76, 0x3BBF78, 0x3BBF7A, 0x3BBF7C, 0x3BBF7E, 0x3BBF80, 0x3BBF82, 0x3BBF84, 0x3BBF86, 0x3BBF9E, 0x3BBFA0, 0x3BBFC6, 0x3BBFC8, 0x3BBFCA, 0x3BBFCC, 0x3BBFCE, 0x3BBFD0, 0x3BBFD2, 0x3BBFD4, 0x3BBFD6, 0x3BBFD8, 0x3BBFDA, 0x3BBFDC, 0x3BBFDE, 0x3BBFE0, 0x3BBFE2, 0x3BBFE4, 0x3BBFE6, 0x3BBFE8, 0x3BBFEA, 0x3BBFEC, 0x3BBFEE, 0x3BBFF0, 0x3BBFF2, 0x3BBFF4, 0x3BBFF6, 0x3BBFF8, 0x3BC002, 0x3BC004, 0x3BC006, 0x3BC008, 0x3BC00A, 0x3BC00C, 0x3BC00E, 0x3BC010, 0x3BC012, 0x3BC014, 0x3BC016, 0x3BC018, 0x3BC01A, 0x3BC01C, 0x3BC01E, 0x3BC020, 0x3BC022, 0x3BC024, 0x3BC028, 0x3BC066, 0x3BC068, 0x3BC06A, 0x3BC06C, 0x3BC06E, 0x3BC070, 0x3BC072, 0x3BC074, 0x3BC076, 0x3BC078, 0x3BC07A, 0x3BC07C, 0x3BC07E, 0x3BC080, 0x3BC082, 0x3BC084, 0x3BC086, 0x3BC088, 0x3BC08A, 0x3BC08C, 0x3BC0CA, 0x3BC0CC, 0x3BC0DE, 0x3BC0E0, 0x3BC0E2, 0x3BC0E8, 0x3BC0EA, 0x3BC0EC, 0x3BC0F4, 0x3BC0FC, 0x3BC0FE, 0x3BC100, 0x3BC11C, 0x3BC124, 0x3BC126, 0x3BC12A, 0x3BC12E, 0x3BC130, 0x3BC138, 0x3BC142, 0x3BC14E, 0x3BC150, 0x3BC152, 0x3BC160, 0x3BC162, 0x3BC164, 0x3BC166, 0x3BC174, 0x3BC176, 0x3BC188, 0x3BC18A, 0x3BC18C, 0x3BC18E, 0x3BC19E, 0x3BC1A2, 0x3BC1A6, 0x3BC1A8, 0x3BC1B0, 0x3BC1B4, 0x3BC1BA, 0x3BC1BC, 0x3BC1D0, 0x3BC1D2, 0x3BC1DA, 0x3BC1EC, 0x3BC1EE, 0x3BC1F0, 0x3BC202, 0x3BC20A, 0x3BC20C, 0x3BC20E, 0x3BC214, 0x3BC216, 0x3BC218, 0x3BC21A, 0x3BC228, 0x3BC22A, 0x3BC234, 0x3BC23C, 0x3BC23E, 0x3BC246, 0x3BC248, 0x3BC24A, 0x3BC250, 0x3BC252, 0x3BC25A, 0x3BC25C, 0x3BC264, 0x3BC270, 0x3BC276, 0x3BC278, 0x3BC280, 0x3BC28A, 0x3BC294, 0x3BC296, 0x3BC29E, 0x3BC2A8, 0x3BC2B2, 0x3BC2C6, 0x3BC2D0, 0x3BC2D2, 0x3BC2E4, 0x3BC2E6, 0x3BC3EA, 0x3BC3EC, 0x3BC3EE, 0x3BC3F0, 0x3BC3F4, 0x3BC3F6, 0x3BC3F8, 0x3BC3FA]
            save_6_recipesListOffsets = [0x3BC040, 0x3BC042, 0x3BC044, 0x3BC046, 0x3BC048, 0x3BC04A, 0x3BC04C, 0x3BC04E, 0x3BC050, 0x3BC052, 0x3BC054, 0x3BC056, 0x3BC058, 0x3BC05A, 0x3BC05C, 0x3BC05E, 0x3BC060]
            save_6_cashmaterialsListOffsets = [0x3BC232, 0x3BC236, 0x3BC2FA, 0x3BC2FC, 0x3BC300, 0x3BC302, 0x3BC306, 0x3BC30A, 0x3BC30C, 0x3BC310, 0x3BC316, 0x3BC31A, 0x3BC31C, 0x3BC320, 0x3BC326, 0x3BC32A, 0x3BC330, 0x3BC336, 0x3BC33A, 0x3BC340, 0x3BC346, 0x3BC34A, 0x3BC34C, 0x3BC350, 0x3BC356, 0x3BC358, 0x3BC35A, 0x3BC35C, 0x3BC360, 0x3BC366, 0x3BC36A, 0x3BC36C, 0x3BC370, 0x3BC376, 0x3BC39A, 0x3BC39E, 0x3BC3A2, 0x3BC3A6, 0x3BC3AA, 0x3BC3AE, 0x3BC3B0, 0x3BC3B2, 0x3BC3B6, 0x3BC3FE, 0x3BC400, 0x3BC402]
            save_6_skillcardsListOffsets = [0x3BC6E2, 0x3BC6E4, 0x3BC6E6, 0x3BC6E8, 0x3BC6EA, 0x3BC6EC, 0x3BC6EE, 0x3BC6F0, 0x3BC6F2, 0x3BC6F4, 0x3BC6F6, 0x3BC6F8, 0x3BC6FA, 0x3BC6FC, 0x3BC6FE, 0x3BC700, 0x3BC702, 0x3BC704, 0x3BC706, 0x3BC708, 0x3BC70A, 0x3BC70C, 0x3BC70E, 0x3BC710, 0x3BC712, 0x3BC714, 0x3BC716, 0x3BC718, 0x3BC71A, 0x3BC71C, 0x3BC71E, 0x3BC720, 0x3BC722, 0x3BC724, 0x3BC726, 0x3BC728, 0x3BC72A, 0x3BC72C, 0x3BC72E, 0x3BC730, 0x3BC732, 0x3BC734, 0x3BC736, 0x3BC738, 0x3BC73A, 0x3BC73C, 0x3BC73E, 0x3BC740, 0x3BC742, 0x3BC744, 0x3BC746, 0x3BC748, 0x3BC74A, 0x3BC74C, 0x3BC74E, 0x3BC750, 0x3BC752, 0x3BC754, 0x3BC756, 0x3BC758, 0x3BC75A, 0x3BC75C, 0x3BC75E, 0x3BC760, 0x3BC762, 0x3BC764, 0x3BC766, 0x3BC768, 0x3BC76A, 0x3BC76C, 0x3BC76E, 0x3BC770, 0x3BC772, 0x3BC774, 0x3BC776, 0x3BC778, 0x3BC77A, 0x3BC77C, 0x3BC77E, 0x3BC780, 0x3BC782, 0x3BC784, 0x3BC786, 0x3BC788, 0x3BC78A, 0x3BC78C, 0x3BC78E, 0x3BC790, 0x3BC792, 0x3BC794, 0x3BC796, 0x3BC798, 0x3BC79A, 0x3BC79C, 0x3BC79E, 0x3BC7A0, 0x3BC7A2, 0x3BC7A4, 0x3BC7A6, 0x3BC7A8, 0x3BC7AA, 0x3BC7AC, 0x3BC7AE, 0x3BC7B0, 0x3BC7B2, 0x3BC7B4, 0x3BC7B6, 0x3BC7B8, 0x3BC7BA, 0x3BC7BC, 0x3BC7BE, 0x3BC7C0, 0x3BC7C2, 0x3BC7C4, 0x3BC7C6, 0x3BC7C8, 0x3BC7CA, 0x3BC7CC, 0x3BC7CE, 0x3BC7D0, 0x3BC7D2, 0x3BC7D4, 0x3BC7D6, 0x3BC7D8, 0x3BC7DA, 0x3BC7DC, 0x3BC7DE, 0x3BC7E0, 0x3BC7E2, 0x3BC7EA, 0x3BC7F2, 0x3BC7F4, 0x3BC7F6, 0x3BC7F8, 0x3BC7FA, 0x3BC7FC, 0x3BC7FE, 0x3BC800, 0x3BC802, 0x3BC804, 0x3BC806, 0x3BC808, 0x3BC80A, 0x3BC80C, 0x3BC80E, 0x3BC810, 0x3BC812, 0x3BC814, 0x3BC816, 0x3BC818, 0x3BC81A, 0x3BC81C, 0x3BC81E, 0x3BC820, 0x3BC822, 0x3BC824, 0x3BC826, 0x3BC828, 0x3BC82A, 0x3BC82C, 0x3BC82E, 0x3BC830, 0x3BC832, 0x3BC834, 0x3BC836, 0x3BC838, 0x3BC83A, 0x3BC83C, 0x3BC83E, 0x3BC840, 0x3BC842, 0x3BC844, 0x3BC846, 0x3BC848, 0x3BC84A, 0x3BC84C, 0x3BC84E, 0x3BC850, 0x3BC852, 0x3BC854, 0x3BC856, 0x3BC858, 0x3BC85A, 0x3BC85C, 0x3BC85E, 0x3BC860, 0x3BC862, 0x3BC864, 0x3BC866, 0x3BC868, 0x3BC86A, 0x3BC86C, 0x3BC86E, 0x3BC870, 0x3BC872, 0x3BC874, 0x3BC876, 0x3BC878, 0x3BC87A, 0x3BC87C, 0x3BC87E, 0x3BC880, 0x3BC882, 0x3BC884, 0x3BC886, 0x3BC888, 0x3BC88A, 0x3BC88C, 0x3BC88E, 0x3BC890, 0x3BC892, 0x3BC894, 0x3BC896, 0x3BC898, 0x3BC89A, 0x3BC89C, 0x3BC89E, 0x3BC8A0, 0x3BC8A2, 0x3BC8A4, 0x3BC8A6, 0x3BC8A8, 0x3BC8AA, 0x3BC8AC, 0x3BC8AE, 0x3BC8B0, 0x3BC8B2, 0x3BC8B4, 0x3BC8B6, 0x3BC8B8, 0x3BC8BA, 0x3BC8BC, 0x3BC8BE, 0x3BC8C0, 0x3BC8C6, 0x3BC8C8, 0x3BC8CA, 0x3BC8CC, 0x3BC8CE, 0x3BC8D0, 0x3BC8D2, 0x3BC8D4, 0x3BC8D6, 0x3BC8DC, 0x3BC8DE, 0x3BC8E0, 0x3BC8E2, 0x3BC8E4]
            save_6_personaListOffsets = [0x3B882A, 0x3B882C, 0x3B882E, 0x3B8830, 0x3B8832, 0x3B8834, 0x3B8836, 0x3B8838]

            #########################################
            #             Save 7 List               #
            #########################################
            save_7_characterOffsets = [0x445BD8, 0x445BF9]
            save_7_mppbListOffsets = [0x445C24, 0x445C28, 0x445A78]
            save_7_weaponListOffsets = [0x444668, 0x44466A, 0x44466C, 0x44466E, 0x444670, 0x444672, 0x444674, 0x444676, 0x444678, 0x44467A, 0x44467C, 0x44467E, 0x444680, 0x444682, 0x444684, 0x444686, 0x444688, 0x44468A, 0x44469A, 0x44469C, 0x44469E, 0x4446A0, 0x4446A2, 0x4446A4, 0x4446A6, 0x4446A8, 0x4446AA, 0x4446AC, 0x4446AE, 0x4446B0, 0x4446B2, 0x4446B4, 0x4446B6, 0x4446B8, 0x4446BA, 0x4446CC, 0x4446CE, 0x4446D0, 0x4446D2, 0x4446D4, 0x4446D6, 0x4446D8, 0x4446DA, 0x4446DC, 0x4446DE, 0x4446E0, 0x4446E2, 0x4446E4, 0x4446E6, 0x4446E8, 0x4446EA, 0x4446EC, 0x4446EE, 0x4446FE, 0x444700, 0x444702, 0x444704, 0x444706, 0x444708, 0x44470A, 0x44470C, 0x44470E, 0x444710, 0x444712, 0x444714, 0x444716, 0x444718, 0x44471A, 0x44471C, 0x44471E, 0x444720, 0x444730, 0x444732, 0x444734, 0x444736, 0x444738, 0x44473A, 0x44473C, 0x44473E, 0x444740, 0x444742, 0x444744, 0x444746, 0x444748, 0x44474A, 0x44474C, 0x44474E, 0x444750, 0x444752, 0x444762, 0x444764, 0x444766, 0x444768, 0x44476A, 0x44476C, 0x44476E, 0x444770, 0x444772, 0x444774, 0x444776, 0x444778, 0x44477A, 0x44477C, 0x44477E, 0x444780, 0x444782, 0x444784, 0x444794, 0x444796, 0x444798, 0x44479A, 0x44479C, 0x44479E, 0x4447A0, 0x4447A2, 0x4447A4, 0x4447A6, 0x4447A8, 0x4447AA, 0x4447AC, 0x4447AE, 0x4447B0, 0x4447B2, 0x4447B4, 0x4447B6, 0x4447C6, 0x4447C8, 0x4447CA, 0x4447CC, 0x4447CE, 0x4447D0, 0x4447D2, 0x4447D4, 0x4447D6, 0x4447D8, 0x4447DA, 0x4447DC, 0x4447DE, 0x4447E0, 0x4447E2, 0x4447E4, 0x4447E6, 0x4447E8, 0x4447F8, 0x4447FA, 0x4447FC, 0x4447FE, 0x444800, 0x444802, 0x444804, 0x444806, 0x444808, 0x44480A, 0x44480C]
            save_7_armorsListOffsets = [0x444A50, 0x444A52, 0x444A54, 0x444A56, 0x444A58, 0x444A5A, 0x444A5C, 0x444A5E, 0x444A60, 0x444A62, 0x444A78, 0x444A7A, 0x444A7C, 0x444A7E, 0x444A80, 0x444A82, 0x444A84, 0x444A86, 0x444A88, 0x444A8A, 0x444A8C, 0x444A8E, 0x444A90, 0x444A92, 0x444AA0, 0x444AA2, 0x444AA4, 0x444AA6, 0x444AA8, 0x444AAA, 0x444AAC, 0x444AAE, 0x444AB0, 0x444AB2, 0x444AB4, 0x444AB6, 0x444AB8, 0x444ABA, 0x444ABC, 0x444ABE, 0x444AC8, 0x444ACA, 0x444ACC, 0x444ACE, 0x444AD0, 0x444AD2, 0x444AD4, 0x444AD6, 0x444AD8, 0x444ADA, 0x444ADC, 0x444ADE, 0x444AE0, 0x444AE2, 0x444AE4, 0x444AE6, 0x444AF0, 0x444AF2, 0x444AF4, 0x444AF6, 0x444AF8, 0x444AFA, 0x444AFC, 0x444AFE, 0x444B00, 0x444B02, 0x444B04, 0x444B06, 0x444B08, 0x444B0A, 0x444B0C, 0x444B18, 0x444B1A, 0x444B1C, 0x444B1E]
            save_7_accessoriesListOffsets = [0x444BE0, 0x444BE2, 0x444BE4, 0x444BE6, 0x444BE8, 0x444BEA, 0x444BEC, 0x444BEE, 0x444BF2, 0x444BF4, 0x444C00, 0x444C02, 0x444C04, 0x444C06, 0x444C08, 0x444C0A, 0x444C0C, 0x444C0E, 0x444C10, 0x444C12, 0x444C14, 0x444C16, 0x444C18, 0x444C1A, 0x444C1C, 0x444C1E, 0x444C20, 0x444C22, 0x444C24, 0x444C26, 0x444C28, 0x444C2A, 0x444C2C, 0x444C2E, 0x444C30, 0x444C32, 0x444C34, 0x444C36, 0x444C38, 0x444C3A, 0x444C3C, 0x444C3E, 0x444C40, 0x444C42, 0x444C44, 0x444C46, 0x444C4A, 0x444C4C, 0x444C4E, 0x444C50, 0x444C52, 0x444C54, 0x444C56, 0x444C58, 0x444C5A, 0x444C5C, 0x444C5E, 0x444C60, 0x444C62, 0x444C64, 0x444C66, 0x444C68, 0x444C6A, 0x444C6C, 0x444C6E, 0x444C70, 0x444C72, 0x444C74, 0x444C76, 0x444C78, 0x444C7A, 0x444C7C, 0x444C7E, 0x444C80, 0x444C82, 0x444C84, 0x444C86, 0x444C88, 0x444C8C, 0x444C8E, 0x444C90, 0x444C92, 0x444C94, 0x444C96, 0x444C98, 0x444C9A, 0x444CA0, 0x444CA2, 0x444CAA, 0x444CAC, 0x444CAE, 0x444CB0, 0x444CB2, 0x444CB4, 0x444CB6, 0x444CB8, 0x444CBA, 0x444CBC, 0x444CBE, 0x444CC0, 0x444CC2, 0x444CC4, 0x444CC6, 0x444CC8, 0x444CCA, 0x444CD0, 0x444CD2, 0x444D0C, 0x444D0E, 0x444D10, 0x444D12, 0x444D14, 0x444D18, 0x444D1E, 0x444D20, 0x444D22, 0x444D2C, 0x444D2E, 0x444D30, 0x444D32, 0x444D34, 0x444D36, 0x444D38, 0x444D3A, 0x444D3C, 0x444D3E, 0x444D40, 0x444D42, 0x444D44]
            save_7_consumablesListOffsets = [0x444D48, 0x444D4A, 0x444D4C, 0x444D4E, 0x444D50, 0x444D5C, 0x444D5E, 0x444D60, 0x444D62, 0x444D64, 0x444D66, 0x444D68, 0x444D70, 0x444D72, 0x444D74, 0x444D76, 0x444D84, 0x444D86, 0x444D88, 0x444D8A, 0x444D8C, 0x444D98, 0x444D9A, 0x444D9C, 0x444D9E, 0x444DAC, 0x444DAE, 0x444DB0, 0x444DB2, 0x444DB4, 0x444DB6, 0x444DB8, 0x444DBA, 0x444DBC, 0x444DD4, 0x444DD6, 0x444DFC, 0x444DFE, 0x444E00, 0x444E02, 0x444E04, 0x444E06, 0x444E08, 0x444E0A, 0x444E0C, 0x444E0E, 0x444E10, 0x444E12, 0x444E14, 0x444E16, 0x444E18, 0x444E1A, 0x444E1C, 0x444E1E, 0x444E20, 0x444E22, 0x444E24, 0x444E26, 0x444E28, 0x444E2A, 0x444E2C, 0x444E2E, 0x444E38, 0x444E3A, 0x444E3C, 0x444E3E, 0x444E40, 0x444E42, 0x444E44, 0x444E46, 0x444E48, 0x444E4A, 0x444E4C, 0x444E4E, 0x444E50, 0x444E52, 0x444E54, 0x444E56, 0x444E58, 0x444E5A, 0x444E5E, 0x444E9C, 0x444E9E, 0x444EA0, 0x444EA2, 0x444EA4, 0x444EA6, 0x444EA8, 0x444EAA, 0x444EAC, 0x444EAE, 0x444EB0, 0x444EB2, 0x444EB4, 0x444EB6, 0x444EB8, 0x444EBA, 0x444EBC, 0x444EBE, 0x444EC0, 0x444EC2, 0x444F00, 0x444F02, 0x444F14, 0x444F16, 0x444F18, 0x444F1E, 0x444F20, 0x444F22, 0x444F2A, 0x444F32, 0x444F34, 0x444F36, 0x444F52, 0x444F5A, 0x444F5C, 0x444F60, 0x444F64, 0x444F66, 0x444F6E, 0x444F78, 0x444F84, 0x444F86, 0x444F88, 0x444F96, 0x444F98, 0x444F9A, 0x444F9C, 0x444FAA, 0x444FAC, 0x444FBE, 0x444FC0, 0x444FC2, 0x444FC4, 0x444FD4, 0x444FD8, 0x444FDC, 0x444FDE, 0x444FE6, 0x444FEA, 0x444FF0, 0x444FF2, 0x445006, 0x445008, 0x445010, 0x445022, 0x445024, 0x445026, 0x445038, 0x445040, 0x445042, 0x445044, 0x44504A, 0x44504C, 0x44504E, 0x445050, 0x44505E, 0x445060, 0x44506A, 0x445072, 0x445074, 0x44507C, 0x44507E, 0x445080, 0x445086, 0x445088, 0x445090, 0x445092, 0x44509A, 0x4450A6, 0x4450AC, 0x4450AE, 0x4450B6, 0x4450C0, 0x4450CA, 0x4450CC, 0x4450D4, 0x4450DE, 0x4450E8, 0x4450FC, 0x445106, 0x445108, 0x44511A, 0x44511C, 0x445220, 0x445222, 0x445224, 0x445226, 0x44522A, 0x44522C, 0x44522E, 0x445230]
            save_7_recipesListOffsets = [0x444E76, 0x444E78, 0x444E7A, 0x444E7C, 0x444E7E, 0x444E80, 0x444E82, 0x444E84, 0x444E86, 0x444E88, 0x444E8A, 0x444E8C, 0x444E8E, 0x444E90, 0x444E92, 0x444E94, 0x444E96]
            save_7_cashmaterialsListOffsets = [0x445068, 0x44506C, 0x445130, 0x445132, 0x445136, 0x445138, 0x44513C, 0x445140, 0x445142, 0x445146, 0x44514C, 0x445150, 0x445152, 0x445156, 0x44515C, 0x445160, 0x445166, 0x44516C, 0x445170, 0x445176, 0x44517C, 0x445180, 0x445182, 0x445186, 0x44518C, 0x44518E, 0x445190, 0x445192, 0x445196, 0x44519C, 0x4451A0, 0x4451A2, 0x4451A6, 0x4451AC, 0x4451D0, 0x4451D4, 0x4451D8, 0x4451DC, 0x4451E0, 0x4451E4, 0x4451E6, 0x4451E8, 0x4451EC, 0x445234, 0x445236, 0x445238]
            save_7_skillcardsListOffsets = [0x445518, 0x44551A, 0x44551C, 0x44551E, 0x445520, 0x445522, 0x445524, 0x445526, 0x445528, 0x44552A, 0x44552C, 0x44552E, 0x445530, 0x445532, 0x445534, 0x445536, 0x445538, 0x44553A, 0x44553C, 0x44553E, 0x445540, 0x445542, 0x445544, 0x445546, 0x445548, 0x44554A, 0x44554C, 0x44554E, 0x445550, 0x445552, 0x445554, 0x445556, 0x445558, 0x44555A, 0x44555C, 0x44555E, 0x445560, 0x445562, 0x445564, 0x445566, 0x445568, 0x44556A, 0x44556C, 0x44556E, 0x445570, 0x445572, 0x445574, 0x445576, 0x445578, 0x44557A, 0x44557C, 0x44557E, 0x445580, 0x445582, 0x445584, 0x445586, 0x445588, 0x44558A, 0x44558C, 0x44558E, 0x445590, 0x445592, 0x445594, 0x445596, 0x445598, 0x44559A, 0x44559C, 0x44559E, 0x4455A0, 0x4455A2, 0x4455A4, 0x4455A6, 0x4455A8, 0x4455AA, 0x4455AC, 0x4455AE, 0x4455B0, 0x4455B2, 0x4455B4, 0x4455B6, 0x4455B8, 0x4455BA, 0x4455BC, 0x4455BE, 0x4455C0, 0x4455C2, 0x4455C4, 0x4455C6, 0x4455C8, 0x4455CA, 0x4455CC, 0x4455CE, 0x4455D0, 0x4455D2, 0x4455D4, 0x4455D6, 0x4455D8, 0x4455DA, 0x4455DC, 0x4455DE, 0x4455E0, 0x4455E2, 0x4455E4, 0x4455E6, 0x4455E8, 0x4455EA, 0x4455EC, 0x4455EE, 0x4455F0, 0x4455F2, 0x4455F4, 0x4455F6, 0x4455F8, 0x4455FA, 0x4455FC, 0x4455FE, 0x445600, 0x445602, 0x445604, 0x445606, 0x445608, 0x44560A, 0x44560C, 0x44560E, 0x445610, 0x445612, 0x445614, 0x445616, 0x445618, 0x445620, 0x445628, 0x44562A, 0x44562C, 0x44562E, 0x445630, 0x445632, 0x445634, 0x445636, 0x445638, 0x44563A, 0x44563C, 0x44563E, 0x445640, 0x445642, 0x445644, 0x445646, 0x445648, 0x44564A, 0x44564C, 0x44564E, 0x445650, 0x445652, 0x445654, 0x445656, 0x445658, 0x44565A, 0x44565C, 0x44565E, 0x445660, 0x445662, 0x445664, 0x445666, 0x445668, 0x44566A, 0x44566C, 0x44566E, 0x445670, 0x445672, 0x445674, 0x445676, 0x445678, 0x44567A, 0x44567C, 0x44567E, 0x445680, 0x445682, 0x445684, 0x445686, 0x445688, 0x44568A, 0x44568C, 0x44568E, 0x445690, 0x445692, 0x445694, 0x445696, 0x445698, 0x44569A, 0x44569C, 0x44569E, 0x4456A0, 0x4456A2, 0x4456A4, 0x4456A6, 0x4456A8, 0x4456AA, 0x4456AC, 0x4456AE, 0x4456B0, 0x4456B2, 0x4456B4, 0x4456B6, 0x4456B8, 0x4456BA, 0x4456BC, 0x4456BE, 0x4456C0, 0x4456C2, 0x4456C4, 0x4456C6, 0x4456C8, 0x4456CA, 0x4456CC, 0x4456CE, 0x4456D0, 0x4456D2, 0x4456D4, 0x4456D6, 0x4456D8, 0x4456DA, 0x4456DC, 0x4456DE, 0x4456E0, 0x4456E2, 0x4456E4, 0x4456E6, 0x4456E8, 0x4456EA, 0x4456EC, 0x4456EE, 0x4456F0, 0x4456F2, 0x4456F4, 0x4456F6, 0x4456FC, 0x4456FE, 0x445700, 0x445702, 0x445704, 0x445706, 0x445708, 0x44570A, 0x44570C, 0x445712, 0x445714, 0x445716, 0x445718, 0x44571A]
            save_7_personaListOffsets = [0x441660, 0x441662, 0x441664, 0x441666, 0x441668, 0x44166A, 0x44166C, 0x44166E]

            #########################################
            #             Save 8 List               #
            #########################################
            save_8_characterOffsets = [0x4CEA0E, 0x4CEA2F]
            save_8_mppbListOffsets = [0x4CEA5A, 0x4CEA5E, 0x4CE8AE]
            save_8_weaponListOffsets = [0x4CD49E, 0x4CD4A0, 0x4CD4A2, 0x4CD4A4, 0x4CD4A6, 0x4CD4A8, 0x4CD4AA, 0x4CD4AC, 0x4CD4AE, 0x4CD4B0, 0x4CD4B2, 0x4CD4B4, 0x4CD4B6, 0x4CD4B8, 0x4CD4BA, 0x4CD4BC, 0x4CD4BE, 0x4CD4C0, 0x4CD4D0, 0x4CD4D2, 0x4CD4D4, 0x4CD4D6, 0x4CD4D8, 0x4CD4DA, 0x4CD4DC, 0x4CD4DE, 0x4CD4E0, 0x4CD4E2, 0x4CD4E4, 0x4CD4E6, 0x4CD4E8, 0x4CD4EA, 0x4CD4EC, 0x4CD4EE, 0x4CD4F0, 0x4CD502, 0x4CD504, 0x4CD506, 0x4CD508, 0x4CD50A, 0x4CD50C, 0x4CD50E, 0x4CD510, 0x4CD512, 0x4CD514, 0x4CD516, 0x4CD518, 0x4CD51A, 0x4CD51C, 0x4CD51E, 0x4CD520, 0x4CD522, 0x4CD524, 0x4CD534, 0x4CD536, 0x4CD538, 0x4CD53A, 0x4CD53C, 0x4CD53E, 0x4CD540, 0x4CD542, 0x4CD544, 0x4CD546, 0x4CD548, 0x4CD54A, 0x4CD54C, 0x4CD54E, 0x4CD550, 0x4CD552, 0x4CD554, 0x4CD556, 0x4CD566, 0x4CD568, 0x4CD56A, 0x4CD56C, 0x4CD56E, 0x4CD570, 0x4CD572, 0x4CD574, 0x4CD576, 0x4CD578, 0x4CD57A, 0x4CD57C, 0x4CD57E, 0x4CD580, 0x4CD582, 0x4CD584, 0x4CD586, 0x4CD588, 0x4CD598, 0x4CD59A, 0x4CD59C, 0x4CD59E, 0x4CD5A0, 0x4CD5A2, 0x4CD5A4, 0x4CD5A6, 0x4CD5A8, 0x4CD5AA, 0x4CD5AC, 0x4CD5AE, 0x4CD5B0, 0x4CD5B2, 0x4CD5B4, 0x4CD5B6, 0x4CD5B8, 0x4CD5BA, 0x4CD5CA, 0x4CD5CC, 0x4CD5CE, 0x4CD5D0, 0x4CD5D2, 0x4CD5D4, 0x4CD5D6, 0x4CD5D8, 0x4CD5DA, 0x4CD5DC, 0x4CD5DE, 0x4CD5E0, 0x4CD5E2, 0x4CD5E4, 0x4CD5E6, 0x4CD5E8, 0x4CD5EA, 0x4CD5EC, 0x4CD5FC, 0x4CD5FE, 0x4CD600, 0x4CD602, 0x4CD604, 0x4CD606, 0x4CD608, 0x4CD60A, 0x4CD60C, 0x4CD60E, 0x4CD610, 0x4CD612, 0x4CD614, 0x4CD616, 0x4CD618, 0x4CD61A, 0x4CD61C, 0x4CD61E, 0x4CD62E, 0x4CD630, 0x4CD632, 0x4CD634, 0x4CD636, 0x4CD638, 0x4CD63A, 0x4CD63C, 0x4CD63E, 0x4CD640, 0x4CD642]
            save_8_armorsListOffsets = [0x4CD886, 0x4CD888, 0x4CD88A, 0x4CD88C, 0x4CD88E, 0x4CD890, 0x4CD892, 0x4CD894, 0x4CD896, 0x4CD898, 0x4CD8AE, 0x4CD8B0, 0x4CD8B2, 0x4CD8B4, 0x4CD8B6, 0x4CD8B8, 0x4CD8BA, 0x4CD8BC, 0x4CD8BE, 0x4CD8C0, 0x4CD8C2, 0x4CD8C4, 0x4CD8C6, 0x4CD8C8, 0x4CD8D6, 0x4CD8D8, 0x4CD8DA, 0x4CD8DC, 0x4CD8DE, 0x4CD8E0, 0x4CD8E2, 0x4CD8E4, 0x4CD8E6, 0x4CD8E8, 0x4CD8EA, 0x4CD8EC, 0x4CD8EE, 0x4CD8F0, 0x4CD8F2, 0x4CD8F4, 0x4CD8FE, 0x4CD900, 0x4CD902, 0x4CD904, 0x4CD906, 0x4CD908, 0x4CD90A, 0x4CD90C, 0x4CD90E, 0x4CD910, 0x4CD912, 0x4CD914, 0x4CD916, 0x4CD918, 0x4CD91A, 0x4CD91C, 0x4CD926, 0x4CD928, 0x4CD92A, 0x4CD92C, 0x4CD92E, 0x4CD930, 0x4CD932, 0x4CD934, 0x4CD936, 0x4CD938, 0x4CD93A, 0x4CD93C, 0x4CD93E, 0x4CD940, 0x4CD942, 0x4CD94E, 0x4CD950, 0x4CD952, 0x4CD954]
            save_8_accessoriesListOffsets = [0x4CDA16, 0x4CDA18, 0x4CDA1A, 0x4CDA1C, 0x4CDA1E, 0x4CDA20, 0x4CDA22, 0x4CDA24, 0x4CDA28, 0x4CDA2A, 0x4CDA36, 0x4CDA38, 0x4CDA3A, 0x4CDA3C, 0x4CDA3E, 0x4CDA40, 0x4CDA42, 0x4CDA44, 0x4CDA46, 0x4CDA48, 0x4CDA4A, 0x4CDA4C, 0x4CDA4E, 0x4CDA50, 0x4CDA52, 0x4CDA54, 0x4CDA56, 0x4CDA58, 0x4CDA5A, 0x4CDA5C, 0x4CDA5E, 0x4CDA60, 0x4CDA62, 0x4CDA64, 0x4CDA66, 0x4CDA68, 0x4CDA6A, 0x4CDA6C, 0x4CDA6E, 0x4CDA70, 0x4CDA72, 0x4CDA74, 0x4CDA76, 0x4CDA78, 0x4CDA7A, 0x4CDA7C, 0x4CDA80, 0x4CDA82, 0x4CDA84, 0x4CDA86, 0x4CDA88, 0x4CDA8A, 0x4CDA8C, 0x4CDA8E, 0x4CDA90, 0x4CDA92, 0x4CDA94, 0x4CDA96, 0x4CDA98, 0x4CDA9A, 0x4CDA9C, 0x4CDA9E, 0x4CDAA0, 0x4CDAA2, 0x4CDAA4, 0x4CDAA6, 0x4CDAA8, 0x4CDAAA, 0x4CDAAC, 0x4CDAAE, 0x4CDAB0, 0x4CDAB2, 0x4CDAB4, 0x4CDAB6, 0x4CDAB8, 0x4CDABA, 0x4CDABC, 0x4CDABE, 0x4CDAC2, 0x4CDAC4, 0x4CDAC6, 0x4CDAC8, 0x4CDACA, 0x4CDACC, 0x4CDACE, 0x4CDAD0, 0x4CDAD6, 0x4CDAD8, 0x4CDAE0, 0x4CDAE2, 0x4CDAE4, 0x4CDAE6, 0x4CDAE8, 0x4CDAEA, 0x4CDAEC, 0x4CDAEE, 0x4CDAF0, 0x4CDAF2, 0x4CDAF4, 0x4CDAF6, 0x4CDAF8, 0x4CDAFA, 0x4CDAFC, 0x4CDAFE, 0x4CDB00, 0x4CDB06, 0x4CDB08, 0x4CDB42, 0x4CDB44, 0x4CDB46, 0x4CDB48, 0x4CDB4A, 0x4CDB4E, 0x4CDB54, 0x4CDB56, 0x4CDB58, 0x4CDB62, 0x4CDB64, 0x4CDB66, 0x4CDB68, 0x4CDB6A, 0x4CDB6C, 0x4CDB6E, 0x4CDB70, 0x4CDB72, 0x4CDB74, 0x4CDB76, 0x4CDB78, 0x4CDB7A]
            save_8_consumablesListOffsets = [0x4CDB7E, 0x4CDB80, 0x4CDB82, 0x4CDB84, 0x4CDB86, 0x4CDB92, 0x4CDB94, 0x4CDB96, 0x4CDB98, 0x4CDB9A, 0x4CDB9C, 0x4CDB9E, 0x4CDBA6, 0x4CDBA8, 0x4CDBAA, 0x4CDBAC, 0x4CDBBA, 0x4CDBBC, 0x4CDBBE, 0x4CDBC0, 0x4CDBC2, 0x4CDBCE, 0x4CDBD0, 0x4CDBD2, 0x4CDBD4, 0x4CDBE2, 0x4CDBE4, 0x4CDBE6, 0x4CDBE8, 0x4CDBEA, 0x4CDBEC, 0x4CDBEE, 0x4CDBF0, 0x4CDBF2, 0x4CDC0A, 0x4CDC0C, 0x4CDC32, 0x4CDC34, 0x4CDC36, 0x4CDC38, 0x4CDC3A, 0x4CDC3C, 0x4CDC3E, 0x4CDC40, 0x4CDC42, 0x4CDC44, 0x4CDC46, 0x4CDC48, 0x4CDC4A, 0x4CDC4C, 0x4CDC4E, 0x4CDC50, 0x4CDC52, 0x4CDC54, 0x4CDC56, 0x4CDC58, 0x4CDC5A, 0x4CDC5C, 0x4CDC5E, 0x4CDC60, 0x4CDC62, 0x4CDC64, 0x4CDC6E, 0x4CDC70, 0x4CDC72, 0x4CDC74, 0x4CDC76, 0x4CDC78, 0x4CDC7A, 0x4CDC7C, 0x4CDC7E, 0x4CDC80, 0x4CDC82, 0x4CDC84, 0x4CDC86, 0x4CDC88, 0x4CDC8A, 0x4CDC8C, 0x4CDC8E, 0x4CDC90, 0x4CDC94, 0x4CDCD2, 0x4CDCD4, 0x4CDCD6, 0x4CDCD8, 0x4CDCDA, 0x4CDCDC, 0x4CDCDE, 0x4CDCE0, 0x4CDCE2, 0x4CDCE4, 0x4CDCE6, 0x4CDCE8, 0x4CDCEA, 0x4CDCEC, 0x4CDCEE, 0x4CDCF0, 0x4CDCF2, 0x4CDCF4, 0x4CDCF6, 0x4CDCF8, 0x4CDD36, 0x4CDD38, 0x4CDD4A, 0x4CDD4C, 0x4CDD4E, 0x4CDD54, 0x4CDD56, 0x4CDD58, 0x4CDD60, 0x4CDD68, 0x4CDD6A, 0x4CDD6C, 0x4CDD88, 0x4CDD90, 0x4CDD92, 0x4CDD96, 0x4CDD9A, 0x4CDD9C, 0x4CDDA4, 0x4CDDAE, 0x4CDDBA, 0x4CDDBC, 0x4CDDBE, 0x4CDDCC, 0x4CDDCE, 0x4CDDD0, 0x4CDDD2, 0x4CDDE0, 0x4CDDE2, 0x4CDDF4, 0x4CDDF6, 0x4CDDF8, 0x4CDDFA, 0x4CDE0A, 0x4CDE0E, 0x4CDE12, 0x4CDE14, 0x4CDE1C, 0x4CDE20, 0x4CDE26, 0x4CDE28, 0x4CDE3C, 0x4CDE3E, 0x4CDE46, 0x4CDE58, 0x4CDE5A, 0x4CDE5C, 0x4CDE6E, 0x4CDE76, 0x4CDE78, 0x4CDE7A, 0x4CDE80, 0x4CDE82, 0x4CDE84, 0x4CDE86, 0x4CDE94, 0x4CDE96, 0x4CDEA0, 0x4CDEA8, 0x4CDEAA, 0x4CDEB2, 0x4CDEB4, 0x4CDEB6, 0x4CDEBC, 0x4CDEBE, 0x4CDEC6, 0x4CDEC8, 0x4CDED0, 0x4CDEDC, 0x4CDEE2, 0x4CDEE4, 0x4CDEEC, 0x4CDEF6, 0x4CDF00, 0x4CDF02, 0x4CDF0A, 0x4CDF14, 0x4CDF1E, 0x4CDF32, 0x4CDF3C, 0x4CDF3E, 0x4CDF50, 0x4CDF52, 0x4CE056, 0x4CE058, 0x4CE05A, 0x4CE05C, 0x4CE060, 0x4CE062, 0x4CE064, 0x4CE066]
            save_8_recipesListOffsets = [0x4CDCAC, 0x4CDCAE, 0x4CDCB0, 0x4CDCB2, 0x4CDCB4, 0x4CDCB6, 0x4CDCB8, 0x4CDCBA, 0x4CDCBC, 0x4CDCBE, 0x4CDCC0, 0x4CDCC2, 0x4CDCC4, 0x4CDCC6, 0x4CDCC8, 0x4CDCCA, 0x4CDCCC]
            save_8_cashmaterialsListOffsets = [0x4CDE9E, 0x4CDEA2, 0x4CDF66, 0x4CDF68, 0x4CDF6C, 0x4CDF6E, 0x4CDF72, 0x4CDF76, 0x4CDF78, 0x4CDF7C, 0x4CDF82, 0x4CDF86, 0x4CDF88, 0x4CDF8C, 0x4CDF92, 0x4CDF96, 0x4CDF9C, 0x4CDFA2, 0x4CDFA6, 0x4CDFAC, 0x4CDFB2, 0x4CDFB6, 0x4CDFB8, 0x4CDFBC, 0x4CDFC2, 0x4CDFC4, 0x4CDFC6, 0x4CDFC8, 0x4CDFCC, 0x4CDFD2, 0x4CDFD6, 0x4CDFD8, 0x4CDFDC, 0x4CDFE2, 0x4CE006, 0x4CE00A, 0x4CE00E, 0x4CE012, 0x4CE016, 0x4CE01A, 0x4CE01C, 0x4CE01E, 0x4CE022, 0x4CE06A, 0x4CE06C, 0x4CE06E]
            save_8_skillcardsListOffsets = [0x4CE34E, 0x4CE350, 0x4CE352, 0x4CE354, 0x4CE356, 0x4CE358, 0x4CE35A, 0x4CE35C, 0x4CE35E, 0x4CE360, 0x4CE362, 0x4CE364, 0x4CE366, 0x4CE368, 0x4CE36A, 0x4CE36C, 0x4CE36E, 0x4CE370, 0x4CE372, 0x4CE374, 0x4CE376, 0x4CE378, 0x4CE37A, 0x4CE37C, 0x4CE37E, 0x4CE380, 0x4CE382, 0x4CE384, 0x4CE386, 0x4CE388, 0x4CE38A, 0x4CE38C, 0x4CE38E, 0x4CE390, 0x4CE392, 0x4CE394, 0x4CE396, 0x4CE398, 0x4CE39A, 0x4CE39C, 0x4CE39E, 0x4CE3A0, 0x4CE3A2, 0x4CE3A4, 0x4CE3A6, 0x4CE3A8, 0x4CE3AA, 0x4CE3AC, 0x4CE3AE, 0x4CE3B0, 0x4CE3B2, 0x4CE3B4, 0x4CE3B6, 0x4CE3B8, 0x4CE3BA, 0x4CE3BC, 0x4CE3BE, 0x4CE3C0, 0x4CE3C2, 0x4CE3C4, 0x4CE3C6, 0x4CE3C8, 0x4CE3CA, 0x4CE3CC, 0x4CE3CE, 0x4CE3D0, 0x4CE3D2, 0x4CE3D4, 0x4CE3D6, 0x4CE3D8, 0x4CE3DA, 0x4CE3DC, 0x4CE3DE, 0x4CE3E0, 0x4CE3E2, 0x4CE3E4, 0x4CE3E6, 0x4CE3E8, 0x4CE3EA, 0x4CE3EC, 0x4CE3EE, 0x4CE3F0, 0x4CE3F2, 0x4CE3F4, 0x4CE3F6, 0x4CE3F8, 0x4CE3FA, 0x4CE3FC, 0x4CE3FE, 0x4CE400, 0x4CE402, 0x4CE404, 0x4CE406, 0x4CE408, 0x4CE40A, 0x4CE40C, 0x4CE40E, 0x4CE410, 0x4CE412, 0x4CE414, 0x4CE416, 0x4CE418, 0x4CE41A, 0x4CE41C, 0x4CE41E, 0x4CE420, 0x4CE422, 0x4CE424, 0x4CE426, 0x4CE428, 0x4CE42A, 0x4CE42C, 0x4CE42E, 0x4CE430, 0x4CE432, 0x4CE434, 0x4CE436, 0x4CE438, 0x4CE43A, 0x4CE43C, 0x4CE43E, 0x4CE440, 0x4CE442, 0x4CE444, 0x4CE446, 0x4CE448, 0x4CE44A, 0x4CE44C, 0x4CE44E, 0x4CE456, 0x4CE45E, 0x4CE460, 0x4CE462, 0x4CE464, 0x4CE466, 0x4CE468, 0x4CE46A, 0x4CE46C, 0x4CE46E, 0x4CE470, 0x4CE472, 0x4CE474, 0x4CE476, 0x4CE478, 0x4CE47A, 0x4CE47C, 0x4CE47E, 0x4CE480, 0x4CE482, 0x4CE484, 0x4CE486, 0x4CE488, 0x4CE48A, 0x4CE48C, 0x4CE48E, 0x4CE490, 0x4CE492, 0x4CE494, 0x4CE496, 0x4CE498, 0x4CE49A, 0x4CE49C, 0x4CE49E, 0x4CE4A0, 0x4CE4A2, 0x4CE4A4, 0x4CE4A6, 0x4CE4A8, 0x4CE4AA, 0x4CE4AC, 0x4CE4AE, 0x4CE4B0, 0x4CE4B2, 0x4CE4B4, 0x4CE4B6, 0x4CE4B8, 0x4CE4BA, 0x4CE4BC, 0x4CE4BE, 0x4CE4C0, 0x4CE4C2, 0x4CE4C4, 0x4CE4C6, 0x4CE4C8, 0x4CE4CA, 0x4CE4CC, 0x4CE4CE, 0x4CE4D0, 0x4CE4D2, 0x4CE4D4, 0x4CE4D6, 0x4CE4D8, 0x4CE4DA, 0x4CE4DC, 0x4CE4DE, 0x4CE4E0, 0x4CE4E2, 0x4CE4E4, 0x4CE4E6, 0x4CE4E8, 0x4CE4EA, 0x4CE4EC, 0x4CE4EE, 0x4CE4F0, 0x4CE4F2, 0x4CE4F4, 0x4CE4F6, 0x4CE4F8, 0x4CE4FA, 0x4CE4FC, 0x4CE4FE, 0x4CE500, 0x4CE502, 0x4CE504, 0x4CE506, 0x4CE508, 0x4CE50A, 0x4CE50C, 0x4CE50E, 0x4CE510, 0x4CE512, 0x4CE514, 0x4CE516, 0x4CE518, 0x4CE51A, 0x4CE51C, 0x4CE51E, 0x4CE520, 0x4CE522, 0x4CE524, 0x4CE526, 0x4CE528, 0x4CE52A, 0x4CE52C, 0x4CE532, 0x4CE534, 0x4CE536, 0x4CE538, 0x4CE53A, 0x4CE53C, 0x4CE53E, 0x4CE540, 0x4CE542, 0x4CE548, 0x4CE54A, 0x4CE54C, 0x4CE54E, 0x4CE550]
            save_8_personaListOffsets = [0x4CA496, 0x4CA498, 0x4CA49A, 0x4CA49C, 0x4CA49E, 0x4CA4A0, 0x4CA4A2, 0x4CA4A4]

            #########################################
            #             Save 9 List               #
            #########################################
            save_9_characterOffsets = [0x557844, 0x557865]
            save_9_mppbListOffsets = [0x557890, 0x557894, 0x5576E4]
            save_9_weaponListOffsets = [0x5562D4, 0x5562D6, 0x5562D8, 0x5562DA, 0x5562DC, 0x5562DE, 0x5562E0, 0x5562E2, 0x5562E4, 0x5562E6, 0x5562E8, 0x5562EA, 0x5562EC, 0x5562EE, 0x5562F0, 0x5562F2, 0x5562F4, 0x5562F6, 0x556306, 0x556308, 0x55630A, 0x55630C, 0x55630E, 0x556310, 0x556312, 0x556314, 0x556316, 0x556318, 0x55631A, 0x55631C, 0x55631E, 0x556320, 0x556322, 0x556324, 0x556326, 0x556338, 0x55633A, 0x55633C, 0x55633E, 0x556340, 0x556342, 0x556344, 0x556346, 0x556348, 0x55634A, 0x55634C, 0x55634E, 0x556350, 0x556352, 0x556354, 0x556356, 0x556358, 0x55635A, 0x55636A, 0x55636C, 0x55636E, 0x556370, 0x556372, 0x556374, 0x556376, 0x556378, 0x55637A, 0x55637C, 0x55637E, 0x556380, 0x556382, 0x556384, 0x556386, 0x556388, 0x55638A, 0x55638C, 0x55639C, 0x55639E, 0x5563A0, 0x5563A2, 0x5563A4, 0x5563A6, 0x5563A8, 0x5563AA, 0x5563AC, 0x5563AE, 0x5563B0, 0x5563B2, 0x5563B4, 0x5563B6, 0x5563B8, 0x5563BA, 0x5563BC, 0x5563BE, 0x5563CE, 0x5563D0, 0x5563D2, 0x5563D4, 0x5563D6, 0x5563D8, 0x5563DA, 0x5563DC, 0x5563DE, 0x5563E0, 0x5563E2, 0x5563E4, 0x5563E6, 0x5563E8, 0x5563EA, 0x5563EC, 0x5563EE, 0x5563F0, 0x556400, 0x556402, 0x556404, 0x556406, 0x556408, 0x55640A, 0x55640C, 0x55640E, 0x556410, 0x556412, 0x556414, 0x556416, 0x556418, 0x55641A, 0x55641C, 0x55641E, 0x556420, 0x556422, 0x556432, 0x556434, 0x556436, 0x556438, 0x55643A, 0x55643C, 0x55643E, 0x556440, 0x556442, 0x556444, 0x556446, 0x556448, 0x55644A, 0x55644C, 0x55644E, 0x556450, 0x556452, 0x556454, 0x556464, 0x556466, 0x556468, 0x55646A, 0x55646C, 0x55646E, 0x556470, 0x556472, 0x556474, 0x556476, 0x556478]
            save_9_armorsListOffsets = [0x5566BC, 0x5566BE, 0x5566C0, 0x5566C2, 0x5566C4, 0x5566C6, 0x5566C8, 0x5566CA, 0x5566CC, 0x5566CE, 0x5566E4, 0x5566E6, 0x5566E8, 0x5566EA, 0x5566EC, 0x5566EE, 0x5566F0, 0x5566F2, 0x5566F4, 0x5566F6, 0x5566F8, 0x5566FA, 0x5566FC, 0x5566FE, 0x55670C, 0x55670E, 0x556710, 0x556712, 0x556714, 0x556716, 0x556718, 0x55671A, 0x55671C, 0x55671E, 0x556720, 0x556722, 0x556724, 0x556726, 0x556728, 0x55672A, 0x556734, 0x556736, 0x556738, 0x55673A, 0x55673C, 0x55673E, 0x556740, 0x556742, 0x556744, 0x556746, 0x556748, 0x55674A, 0x55674C, 0x55674E, 0x556750, 0x556752, 0x55675C, 0x55675E, 0x556760, 0x556762, 0x556764, 0x556766, 0x556768, 0x55676A, 0x55676C, 0x55676E, 0x556770, 0x556772, 0x556774, 0x556776, 0x556778, 0x556784, 0x556786, 0x556788, 0x55678A]
            save_9_accessoriesListOffsets = [0x55684C, 0x55684E, 0x556850, 0x556852, 0x556854, 0x556856, 0x556858, 0x55685A, 0x55685E, 0x556860, 0x55686C, 0x55686E, 0x556870, 0x556872, 0x556874, 0x556876, 0x556878, 0x55687A, 0x55687C, 0x55687E, 0x556880, 0x556882, 0x556884, 0x556886, 0x556888, 0x55688A, 0x55688C, 0x55688E, 0x556890, 0x556892, 0x556894, 0x556896, 0x556898, 0x55689A, 0x55689C, 0x55689E, 0x5568A0, 0x5568A2, 0x5568A4, 0x5568A6, 0x5568A8, 0x5568AA, 0x5568AC, 0x5568AE, 0x5568B0, 0x5568B2, 0x5568B6, 0x5568B8, 0x5568BA, 0x5568BC, 0x5568BE, 0x5568C0, 0x5568C2, 0x5568C4, 0x5568C6, 0x5568C8, 0x5568CA, 0x5568CC, 0x5568CE, 0x5568D0, 0x5568D2, 0x5568D4, 0x5568D6, 0x5568D8, 0x5568DA, 0x5568DC, 0x5568DE, 0x5568E0, 0x5568E2, 0x5568E4, 0x5568E6, 0x5568E8, 0x5568EA, 0x5568EC, 0x5568EE, 0x5568F0, 0x5568F2, 0x5568F4, 0x5568F8, 0x5568FA, 0x5568FC, 0x5568FE, 0x556900, 0x556902, 0x556904, 0x556906, 0x55690C, 0x55690E, 0x556916, 0x556918, 0x55691A, 0x55691C, 0x55691E, 0x556920, 0x556922, 0x556924, 0x556926, 0x556928, 0x55692A, 0x55692C, 0x55692E, 0x556930, 0x556932, 0x556934, 0x556936, 0x55693C, 0x55693E, 0x556978, 0x55697A, 0x55697C, 0x55697E, 0x556980, 0x556984, 0x55698A, 0x55698C, 0x55698E, 0x556998, 0x55699A, 0x55699C, 0x55699E, 0x5569A0, 0x5569A2, 0x5569A4, 0x5569A6, 0x5569A8, 0x5569AA, 0x5569AC, 0x5569AE, 0x5569B0]
            save_9_consumablesListOffsets = [0x5569B4, 0x5569B6, 0x5569B8, 0x5569BA, 0x5569BC, 0x5569C8, 0x5569CA, 0x5569CC, 0x5569CE, 0x5569D0, 0x5569D2, 0x5569D4, 0x5569DC, 0x5569DE, 0x5569E0, 0x5569E2, 0x5569F0, 0x5569F2, 0x5569F4, 0x5569F6, 0x5569F8, 0x556A04, 0x556A06, 0x556A08, 0x556A0A, 0x556A18, 0x556A1A, 0x556A1C, 0x556A1E, 0x556A20, 0x556A22, 0x556A24, 0x556A26, 0x556A28, 0x556A40, 0x556A42, 0x556A68, 0x556A6A, 0x556A6C, 0x556A6E, 0x556A70, 0x556A72, 0x556A74, 0x556A76, 0x556A78, 0x556A7A, 0x556A7C, 0x556A7E, 0x556A80, 0x556A82, 0x556A84, 0x556A86, 0x556A88, 0x556A8A, 0x556A8C, 0x556A8E, 0x556A90, 0x556A92, 0x556A94, 0x556A96, 0x556A98, 0x556A9A, 0x556AA4, 0x556AA6, 0x556AA8, 0x556AAA, 0x556AAC, 0x556AAE, 0x556AB0, 0x556AB2, 0x556AB4, 0x556AB6, 0x556AB8, 0x556ABA, 0x556ABC, 0x556ABE, 0x556AC0, 0x556AC2, 0x556AC4, 0x556AC6, 0x556ACA, 0x556B08, 0x556B0A, 0x556B0C, 0x556B0E, 0x556B10, 0x556B12, 0x556B14, 0x556B16, 0x556B18, 0x556B1A, 0x556B1C, 0x556B1E, 0x556B20, 0x556B22, 0x556B24, 0x556B26, 0x556B28, 0x556B2A, 0x556B2C, 0x556B2E, 0x556B6C, 0x556B6E, 0x556B80, 0x556B82, 0x556B84, 0x556B8A, 0x556B8C, 0x556B8E, 0x556B96, 0x556B9E, 0x556BA0, 0x556BA2, 0x556BBE, 0x556BC6, 0x556BC8, 0x556BCC, 0x556BD0, 0x556BD2, 0x556BDA, 0x556BE4, 0x556BF0, 0x556BF2, 0x556BF4, 0x556C02, 0x556C04, 0x556C06, 0x556C08, 0x556C16, 0x556C18, 0x556C2A, 0x556C2C, 0x556C2E, 0x556C30, 0x556C40, 0x556C44, 0x556C48, 0x556C4A, 0x556C52, 0x556C56, 0x556C5C, 0x556C5E, 0x556C72, 0x556C74, 0x556C7C, 0x556C8E, 0x556C90, 0x556C92, 0x556CA4, 0x556CAC, 0x556CAE, 0x556CB0, 0x556CB6, 0x556CB8, 0x556CBA, 0x556CBC, 0x556CCA, 0x556CCC, 0x556CD6, 0x556CDE, 0x556CE0, 0x556CE8, 0x556CEA, 0x556CEC, 0x556CF2, 0x556CF4, 0x556CFC, 0x556CFE, 0x556D06, 0x556D12, 0x556D18, 0x556D1A, 0x556D22, 0x556D2C, 0x556D36, 0x556D38, 0x556D40, 0x556D4A, 0x556D54, 0x556D68, 0x556D72, 0x556D74, 0x556D86, 0x556D88, 0x556E8C, 0x556E8E, 0x556E90, 0x556E92, 0x556E96, 0x556E98, 0x556E9A, 0x556E9C]
            save_9_recipesListOffsets = [0x556AE2, 0x556AE4, 0x556AE6, 0x556AE8, 0x556AEA, 0x556AEC, 0x556AEE, 0x556AF0, 0x556AF2, 0x556AF4, 0x556AF6, 0x556AF8, 0x556AFA, 0x556AFC, 0x556AFE, 0x556B00, 0x556B02]
            save_9_cashmaterialsListOffsets = [0x556CD4, 0x556CD8, 0x556D9C, 0x556D9E, 0x556DA2, 0x556DA4, 0x556DA8, 0x556DAC, 0x556DAE, 0x556DB2, 0x556DB8, 0x556DBC, 0x556DBE, 0x556DC2, 0x556DC8, 0x556DCC, 0x556DD2, 0x556DD8, 0x556DDC, 0x556DE2, 0x556DE8, 0x556DEC, 0x556DEE, 0x556DF2, 0x556DF8, 0x556DFA, 0x556DFC, 0x556DFE, 0x556E02, 0x556E08, 0x556E0C, 0x556E0E, 0x556E12, 0x556E18, 0x556E3C, 0x556E40, 0x556E44, 0x556E48, 0x556E4C, 0x556E50, 0x556E52, 0x556E54, 0x556E58, 0x556EA0, 0x556EA2, 0x556EA4]
            save_9_skillcardsListOffsets = [0x557184, 0x557186, 0x557188, 0x55718A, 0x55718C, 0x55718E, 0x557190, 0x557192, 0x557194, 0x557196, 0x557198, 0x55719A, 0x55719C, 0x55719E, 0x5571A0, 0x5571A2, 0x5571A4, 0x5571A6, 0x5571A8, 0x5571AA, 0x5571AC, 0x5571AE, 0x5571B0, 0x5571B2, 0x5571B4, 0x5571B6, 0x5571B8, 0x5571BA, 0x5571BC, 0x5571BE, 0x5571C0, 0x5571C2, 0x5571C4, 0x5571C6, 0x5571C8, 0x5571CA, 0x5571CC, 0x5571CE, 0x5571D0, 0x5571D2, 0x5571D4, 0x5571D6, 0x5571D8, 0x5571DA, 0x5571DC, 0x5571DE, 0x5571E0, 0x5571E2, 0x5571E4, 0x5571E6, 0x5571E8, 0x5571EA, 0x5571EC, 0x5571EE, 0x5571F0, 0x5571F2, 0x5571F4, 0x5571F6, 0x5571F8, 0x5571FA, 0x5571FC, 0x5571FE, 0x557200, 0x557202, 0x557204, 0x557206, 0x557208, 0x55720A, 0x55720C, 0x55720E, 0x557210, 0x557212, 0x557214, 0x557216, 0x557218, 0x55721A, 0x55721C, 0x55721E, 0x557220, 0x557222, 0x557224, 0x557226, 0x557228, 0x55722A, 0x55722C, 0x55722E, 0x557230, 0x557232, 0x557234, 0x557236, 0x557238, 0x55723A, 0x55723C, 0x55723E, 0x557240, 0x557242, 0x557244, 0x557246, 0x557248, 0x55724A, 0x55724C, 0x55724E, 0x557250, 0x557252, 0x557254, 0x557256, 0x557258, 0x55725A, 0x55725C, 0x55725E, 0x557260, 0x557262, 0x557264, 0x557266, 0x557268, 0x55726A, 0x55726C, 0x55726E, 0x557270, 0x557272, 0x557274, 0x557276, 0x557278, 0x55727A, 0x55727C, 0x55727E, 0x557280, 0x557282, 0x557284, 0x55728C, 0x557294, 0x557296, 0x557298, 0x55729A, 0x55729C, 0x55729E, 0x5572A0, 0x5572A2, 0x5572A4, 0x5572A6, 0x5572A8, 0x5572AA, 0x5572AC, 0x5572AE, 0x5572B0, 0x5572B2, 0x5572B4, 0x5572B6, 0x5572B8, 0x5572BA, 0x5572BC, 0x5572BE, 0x5572C0, 0x5572C2, 0x5572C4, 0x5572C6, 0x5572C8, 0x5572CA, 0x5572CC, 0x5572CE, 0x5572D0, 0x5572D2, 0x5572D4, 0x5572D6, 0x5572D8, 0x5572DA, 0x5572DC, 0x5572DE, 0x5572E0, 0x5572E2, 0x5572E4, 0x5572E6, 0x5572E8, 0x5572EA, 0x5572EC, 0x5572EE, 0x5572F0, 0x5572F2, 0x5572F4, 0x5572F6, 0x5572F8, 0x5572FA, 0x5572FC, 0x5572FE, 0x557300, 0x557302, 0x557304, 0x557306, 0x557308, 0x55730A, 0x55730C, 0x55730E, 0x557310, 0x557312, 0x557314, 0x557316, 0x557318, 0x55731A, 0x55731C, 0x55731E, 0x557320, 0x557322, 0x557324, 0x557326, 0x557328, 0x55732A, 0x55732C, 0x55732E, 0x557330, 0x557332, 0x557334, 0x557336, 0x557338, 0x55733A, 0x55733C, 0x55733E, 0x557340, 0x557342, 0x557344, 0x557346, 0x557348, 0x55734A, 0x55734C, 0x55734E, 0x557350, 0x557352, 0x557354, 0x557356, 0x557358, 0x55735A, 0x55735C, 0x55735E, 0x557360, 0x557362, 0x557368, 0x55736A, 0x55736C, 0x55736E, 0x557370, 0x557372, 0x557374, 0x557376, 0x557378, 0x55737E, 0x557380, 0x557382, 0x557384, 0x557386]
            save_9_personaListOffsets = [0x5532CC, 0x5532CE, 0x5532D0, 0x5532D2, 0x5532D4, 0x5532D6, 0x5532D8, 0x5532DA]


            #########################################
            #             Save 1 Offsets            #
            #########################################

            if (category == "Character_1"):
                statNames = characterList
                NamestatOffsets = save_1_characterOffsets

            elif(category == "M/PP/B_1"):
                statNames = mppbList
                statOffsets = save_1_mppbListOffsets

            elif(category == "Weapons_1"):
                statNames = weaponList
                statOffsets = save_1_weaponListOffsets

            elif(category == "Armors_1"):
                statNames = armorsList
                statOffsets = save_1_armorsListOffsets

            elif(category == "Accessories_1"):
                statNames = accessoriesList
                statOffsets = save_1_accessoriesListOffsets

            elif(category == "Consumables_1"):
                statNames = consumablesList
                statOffsets = save_1_consumablesListOffsets

            elif (category == "Recipes_1"):
                statNames = recipesList
                statOffsets = save_1_recipesListOffsets

            elif (category == "Cash Materials_1"):
                statNames = cashmaterialsList
                statOffsets = save_1_cashmaterialsListOffsets

            elif (category == "Skill Cards_1"):
                statNames = skillcardsList
                statOffsets = save_1_skillcardsListOffsets

            elif (category == "Persona_1"):
                statNames = personaList
                statOffsets = save_1_personaListOffsets

            #########################################
            #             Save 2 Offsets            #
            #########################################


            if (category == "Character_2"):
                statNames = characterList
                NamestatOffsets = save_2_characterOffsets

            elif(category == "M/PP/B_2"):
                statNames = mppbList
                statOffsets = save_2_mppbListOffsets

            elif(category == "Weapons_2"):
                statNames = weaponList
                statOffsets = save_2_weaponListOffsets

            elif(category == "Armors_2"):
                statNames = armorsList
                statOffsets = save_2_armorsListOffsets

            elif(category == "Accessories_2"):
                statNames = accessoriesList
                statOffsets = save_2_accessoriesListOffsets

            elif(category == "Consumables_2"):
                statNames = consumablesList
                statOffsets = save_2_consumablesListOffsets

            elif (category == "Recipes_2"):
                statNames = recipesList
                statOffsets = save_2_recipesListOffsets

            elif (category == "Cash Materials_2"):
                statNames = cashmaterialsList
                statOffsets = save_2_cashmaterialsListOffsets

            elif (category == "Skill Cards_2"):
                statNames = skillcardsList
                statOffsets = save_2_skillcardsListOffsets

            elif (category == "Persona_2"):
                statNames = personaList
                statOffsets = save_2_personaListOffsets

            #########################################
            #             Save 3 Offsets            #
            #########################################

            if (category == "Character_3"):
                statNames = characterList
                NamestatOffsets = save_3_characterOffsets

            elif(category == "M/PP/B_3"):
                statNames = mppbList
                statOffsets = save_3_mppbListOffsets

            elif(category == "Weapons_3"):
                statNames = weaponList
                statOffsets = save_3_weaponListOffsets

            elif(category == "Armors_3"):
                statNames = armorsList
                statOffsets = save_3_armorsListOffsets

            elif(category == "Accessories_3"):
                statNames = accessoriesList
                statOffsets = save_3_accessoriesListOffsets

            elif(category == "Consumables_3"):
                statNames = consumablesList
                statOffsets = save_3_consumablesListOffsets

            elif (category == "Recipes_3"):
                statNames = recipesList
                statOffsets = save_3_recipesListOffsets

            elif (category == "Cash Materials_3"):
                statNames = cashmaterialsList
                statOffsets = save_3_cashmaterialsListOffsets

            elif (category == "Skill Cards_3"):
                statNames = skillcardsList
                statOffsets = save_3_skillcardsListOffsets

            elif (category == "Persona_3"):
                statNames = personaList
                statOffsets = save_3_personaListOffsets

            #########################################
            #             Save 4 Offsets            #
            #########################################

            if (category == "Character_4"):
                statNames = characterList
                NamestatOffsets = save_4_characterOffsets

            elif(category == "M/PP/B_4"):
                statNames = mppbList
                statOffsets = save_4_mppbListOffsets

            elif(category == "Weapons_4"):
                statNames = weaponList
                statOffsets = save_4_weaponListOffsets

            elif(category == "Armors_4"):
                statNames = armorsList
                statOffsets = save_4_armorsListOffsets

            elif(category == "Accessories_4"):
                statNames = accessoriesList
                statOffsets = save_4_accessoriesListOffsets

            elif(category == "Consumables_4"):
                statNames = consumablesList
                statOffsets = save_4_consumablesListOffsets

            elif (category == "Recipes_4"):
                statNames = recipesList
                statOffsets = save_4_recipesListOffsets

            elif (category == "Cash Materials_4"):
                statNames = cashmaterialsList
                statOffsets = save_4_cashmaterialsListOffsets

            elif (category == "Skill Cards_4"):
                statNames = skillcardsList
                statOffsets = save_4_skillcardsListOffsets

            elif (category == "Persona_4"):
                statNames = personaList
                statOffsets = save_4_personaListOffsets

            #########################################
            #             Save 5 Offsets            #
            #########################################

            if (category == "Character_5"):
                statNames = characterList
                NamestatOffsets = save_5_characterOffsets

            elif(category == "M/PP/B_5"):
                statNames = mppbList
                statOffsets = save_5_mppbListOffsets

            elif(category == "Weapons_5"):
                statNames = weaponList
                statOffsets = save_5_weaponListOffsets

            elif(category == "Armors_5"):
                statNames = armorsList
                statOffsets = save_5_armorsListOffsets

            elif(category == "Accessories_5"):
                statNames = accessoriesList
                statOffsets = save_5_accessoriesListOffsets

            elif(category == "Consumables_5"):
                statNames = consumablesList
                statOffsets = save_5_consumablesListOffsets

            elif (category == "Recipes_5"):
                statNames = recipesList
                statOffsets = save_5_recipesListOffsets

            elif (category == "Cash Materials_5"):
                statNames = cashmaterialsList
                statOffsets = save_5_cashmaterialsListOffsets

            elif (category == "Skill Cards_5"):
                statNames = skillcardsList
                statOffsets = save_5_skillcardsListOffsets

            elif (category == "Persona_5"):
                statNames = personaList
                statOffsets = save_5_personaListOffsets

            #########################################
            #             Save 6 Offsets            #
            #########################################

            if (category == "Character_6"):
                statNames = characterList
                NamestatOffsets = save_6_characterOffsets

            elif(category == "M/PP/B_6"):
                statNames = mppbList
                statOffsets = save_6_mppbListOffsets

            elif(category == "Weapons_6"):
                statNames = weaponList
                statOffsets = save_6_weaponListOffsets

            elif(category == "Armors_6"):
                statNames = armorsList
                statOffsets = save_6_armorsListOffsets

            elif(category == "Accessories_6"):
                statNames = accessoriesList
                statOffsets = save_6_accessoriesListOffsets

            elif(category == "Consumables_6"):
                statNames = consumablesList
                statOffsets = save_6_consumablesListOffsets

            elif (category == "Recipes_6"):
                statNames = recipesList
                statOffsets = save_6_recipesListOffsets

            elif (category == "Cash Materials_6"):
                statNames = cashmaterialsList
                statOffsets = save_6_cashmaterialsListOffsets

            elif (category == "Skill Cards_6"):
                statNames = skillcardsList
                statOffsets = save_6_skillcardsListOffsets

            elif (category == "Persona_6"):
                statNames = personaList
                statOffsets = save_6_personaListOffsets

            #########################################
            #             Save 7 Offsets            #
            #########################################

            if (category == "Character_7"):
                statNames = characterList
                NamestatOffsets = save_7_characterOffsets

            elif(category == "M/PP/B_7"):
                statNames = mppbList
                statOffsets = save_7_mppbListOffsets

            elif(category == "Weapons_7"):
                statNames = weaponList
                statOffsets = save_7_weaponListOffsets

            elif(category == "Armors_7"):
                statNames = armorsList
                statOffsets = save_7_armorsListOffsets

            elif(category == "Accessories_7"):
                statNames = accessoriesList
                statOffsets = save_7_accessoriesListOffsets

            elif(category == "Consumables_7"):
                statNames = consumablesList
                statOffsets = save_7_consumablesListOffsets

            elif (category == "Recipes_7"):
                statNames = recipesList
                statOffsets = save_7_recipesListOffsets

            elif (category == "Cash Materials_7"):
                statNames = cashmaterialsList
                statOffsets = save_7_cashmaterialsListOffsets

            elif (category == "Skill Cards_7"):
                statNames = skillcardsList
                statOffsets = save_7_skillcardsListOffsets

            elif (category == "Persona_7"):
                statNames = personaList
                statOffsets = save_7_personaListOffsets

            #########################################
            #             Save 8 Offsets            #
            #########################################

            if (category == "Character_8"):
                statNames = characterList
                NamestatOffsets = save_8_characterOffsets

            elif(category == "M/PP/B_8"):
                statNames = mppbList
                statOffsets = save_8_mppbListOffsets

            elif(category == "Weapons_8"):
                statNames = weaponList
                statOffsets = save_8_weaponListOffsets

            elif(category == "Armors_8"):
                statNames = armorsList
                statOffsets = save_8_armorsListOffsets

            elif(category == "Accessories_8"):
                statNames = accessoriesList
                statOffsets = save_8_accessoriesListOffsets

            elif(category == "Consumables_8"):
                statNames = consumablesList
                statOffsets = save_8_consumablesListOffsets

            elif (category == "Recipes_8"):
                statNames = recipesList
                statOffsets = save_8_recipesListOffsets

            elif (category == "Cash Materials_8"):
                statNames = cashmaterialsList
                statOffsets = save_8_cashmaterialsListOffsets

            elif (category == "Skill Cards_8"):
                statNames = skillcardsList
                statOffsets = save_8_skillcardsListOffsets

            elif (category == "Persona_8"):
                statNames = personaList
                statOffsets = save_8_personaListOffsets

            #########################################
            #             Save 9 Offsets            #
            #########################################

            if (category == "Character_9"):
                statNames = characterList
                NamestatOffsets = save_9_characterOffsets

            elif(category == "M/PP/B_9"):
                statNames = mppbList
                statOffsets = save_9_mppbListOffsets

            elif(category == "Weapons_9"):
                statNames = weaponList
                statOffsets = save_9_weaponListOffsets

            elif(category == "Armors_9"):
                statNames = armorsList
                statOffsets = save_9_armorsListOffsets

            elif(category == "Accessories_9"):
                statNames = accessoriesList
                statOffsets = save_9_accessoriesListOffsets

            elif(category == "Consumables_9"):
                statNames = consumablesList
                statOffsets = save_9_consumablesListOffsets

            elif (category == "Recipes_9"):
                statNames = recipesList
                statOffsets = save_9_recipesListOffsets

            elif (category == "Cash Materials_9"):
                statNames = cashmaterialsList
                statOffsets = save_9_cashmaterialsListOffsets

            elif (category == "Skill Cards_9"):
                statNames = skillcardsList
                statOffsets = save_9_skillcardsListOffsets

            elif (category == "Persona_9"):
                statNames = personaList
                statOffsets = save_9_personaListOffsets

            #######

            self.tableWidget = QTableWidget()
            self.tableWidget.setColumnCount(2)
            if (category == "Character_1" or category == "Character_2" or category == "Character_3" or category == "Character_4" or category == "Character_5" or category == "Character_6" or category == "Character_7" or category == "Character_8" or category == "Character_9"):
                self.tableWidget.setRowCount(len(NamestatOffsets))
                for x in range(len(NamestatOffsets)):
                    self.tableWidget.setItem(x, 0, QTableWidgetItem(statNames[x]))
                    self.tableWidget.setItem(x, 1, QTableWidgetItem(
                        str(self.readFromPositionName(NamestatOffsets[x], NamestatOffsets[x] + 8, ">LL"))))

            elif(category == "Weapons_1" or category == "Weapons_2" or category == "Weapons_3" or category == "Weapons_4" or category == "Weapons_5" or category == "Weapons_6" or category == "Weapons_7" or category == "Weapons_8" or category == "Weapons_9" or category == "Armors_1" or category == "Armors_2" or category == "Armors_3" or category == "Armors_4" or category == "Armors_5" or category == "Armors_6" or category == "Armors_7" or category == "Armors_8" or category == "Armors_9" or category == "Accessories_1" or category == "Accessories_2" or category == "Accessories_3" or category == "Accessories_4" or category == "Accessories_5" or category == "Accessories_6" or category == "Accessories_7" or category == "Accessories_8" or category == "Accessories_9" or category == "Consumables_1" or category == "Consumables_2" or category == "Consumables_3" or category == "Consumables_4" or category == "Consumables_5" or category == "Consumables_6" or category == "Consumables_7" or category == "Consumables_8" or category == "Consumables_9" or category == "Recipes_1" or category == "Recipes_2" or category == "Recipes_3" or category == "Recipes_4" or category == "Recipes_5" or category == "Recipes_6" or category == "Recipes_7" or category == "Recipes_8" or category == "Recipes_9" or category == "Cash Materials_1" or category == "Cash Materials_2" or category == "Cash Materials_3" or category == "Cash Materials_4" or category == "Cash Materials_5" or category == "Cash Materials_6" or category == "Cash Materials_7" or category == "Cash Materials_8" or category == "Cash Materials_9" or category == "Skill Cards_1" or category == "Skill Cards_2" or category == "Skill Cards_3" or category == "Skill Cards_4" or category == "Skill Cards_5" or category == "Skill Cards_6" or category == "Skill Cards_7" or category == "Skill Cards_8" or category == "Skill Cards_9"):
                self.tableWidget.setRowCount(len(statNames))
                for x in range(len(statOffsets)):
                    self.tableWidget.setItem(x, 0, QTableWidgetItem(statNames[x]))
                    self.tableWidget.setItem(x, 1, QTableWidgetItem(
                        str(self.readFromPosition2bytes(statOffsets[x], statOffsets[x] + 1, "<L"))))

            elif(category == "Persona_1" or category == "Persona_2" or category == "Persona_3" or category == "Persona_4" or category == "Persona_5" or category == "Persona_6" or category == "Persona_7" or category == "Persona_8" or category == "Persona_9"):
                self.tableWidget.setRowCount(len(statNames))
                for x in range(len(statOffsets)):
                    self.tableWidget.setItem(x, 0, QTableWidgetItem(statNames[x]))
                    self.tableWidget.setItem(x, 1, QTableWidgetItem(
                        str(self.readFromPosition2bytes(statOffsets[x], statOffsets[x] + 1, ">L"))))

            else:
                self.tableWidget.setRowCount(len(statNames))

                for x in range(len(statOffsets)):
                    self.tableWidget.setItem(x, 0, QTableWidgetItem(statNames[x]))
                    self.tableWidget.setItem(x, 1, QTableWidgetItem(
                        str(self.readFromPosition(statOffsets[x], statOffsets[x] + 4, "<L"))))

            def writeStatsName():
                for x in range(len(NamestatOffsets)):
                    value = str(self.tableWidget.item(x, 1).text())
                    my_string_4 = re.sub("\x00", "", value)
                    if len(my_string_4) > 8:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Warning)
                        msg.setText("One or more values are too high!")
                        msg.setWindowTitle("Error")
                        msg.exec_()
                        return
                    elif len(my_string_4) <= 8:
                        print(value)
                        newstring = my_string_4.ljust(8, '\x00')
                        print("Test: " + newstring, "Hex: " + newstring.encode("utf-8").hex())
                        self.writeToPositionName(newstring, NamestatOffsets[x], NamestatOffsets[x] + 8, ">LL")

            def writeStats():
                for x in range(len(statOffsets)):
                    value = int(self.tableWidget.item(x, 1).text())
                    if (value <= 0x3B9AC9FF):
                        self.writeToPosition(value, statOffsets[x], statOffsets[x] + 4, "<L")
                    else:
                        msg = QMessageBox()
                        msg.setIcon(QMessageBox.Warning)
                        msg.setText("One or more values are too high!")
                        msg.setWindowTitle("Error")
                        msg.exec_()
                        return

                    if (x == len(statOffsets) - 1):
                        statwindow.done(0)

            def give_items_number():
                amount, okPressed = QInputDialog.getInt(self, "Items", "Amount:", 0, 0, 0x63, 10)

                if okPressed:
                    for x in range(len(statOffsets)):
                        value = self.tableWidget.item(x, 1).setText(str(amount))

            button_save = QPushButton("Save Changes")
            button_give = QPushButton("Give items")
            if (category == "Character_1" or category == "Character_2" or category == "Character_3" or category == "Character_4" or category == "Character_5" or category == "Character_6" or category == "Character_7" or category == "Character_8" or category == "Character_9"):
                button_save.clicked.connect(writeStatsName)
            else:
                button_save.clicked.connect(writeStats)

            button_give.clicked.connect(give_items_number)

            button_cancel = QPushButton("Cancel")
            button_cancel.clicked.connect(statwindow.done)
            hbox = QHBoxLayout()
            hbox.addWidget(button_save)
            hbox.addWidget(button_cancel)
            if (category != "Character_1" and category != "Character_2" and category != "Character_3" and category != "Character_4" and category != "Character_5" and category != "Character_6" and category != "Character_7" and category != "Character_8" and category != "Character_9" and category != "M/PP/B_1" and category != "M/PP/B_2" and category != "M/PP/B_3" and category != "M/PP/B_4" and category != "M/PP/B_5" and category != "M/PP/B_6" and category != "M/PP/B_7" and category != "M/PP/B_8" and category != "M/PP/B_9" and category != "Persona_1" and category != "Persona_2" and category != "Persona_3" and category != "Persona_4" and category != "Persona_5" and category != "Persona_6" and category != "Persona_7" and category != "Persona_8" and category != "Persona_9"):
                hbox.addWidget(button_give)

            self.layout.addLayout(hbox)

            self.tableWidget.setHorizontalHeaderLabels(['Name', 'Value'])
            self.tableWidget.verticalHeader().hide()
            self.tableWidget.setColumnWidth(0, 350)
            self.tableWidget.setColumnWidth(1, 150)
            self.layout.addWidget(self.tableWidget)
            statwindow.setLayout(self.layout)
            statwindow.setWindowModality(Qt.ApplicationModal)
            statwindow.exec_()

    # Read Name
    def readFromPositionName(self, startOffset, endOffset, type):
        valueToRead = (binascii.unhexlify(h[startOffset * 2:endOffset * 2]))
        valueToRead1 = binascii.hexlify(valueToRead)
        valueToRead2 = codecs.decode(valueToRead1, "hex").decode('utf-8')
        return valueToRead2

    # Read Offset Money/Points/Bonds
    def readFromPosition(self, startOffset, endOffset, type):
        valueToRead = (binascii.unhexlify(h[startOffset * 2:endOffset * 2]))
        valueToRead1 = struct.unpack(type, valueToRead)
        valueToRead2 = functools.reduce(lambda rst, d: rst * 10 + d, (valueToRead1))
        return valueToRead2

    # Read Weapons, Armors, Accessories, Consumables, Recipes, Cash Materials, Skill Cards, Persona
    def readFromPosition2bytes(self, startOffset, endOffset, type):
        valueToRead = (binascii.unhexlify(h[startOffset * 2:endOffset * 2]))
        valueToRead1 = binascii.hexlify(valueToRead)
        valueToRead2 = int(valueToRead1, 16)
        return valueToRead2

    # Write to Save Values
    def writeToPosition(self, value, startOffset, endOffset, type):
        global h
        valueToWrite = binascii.hexlify(struct.pack(type, value))
        h = h[:startOffset * 2] + valueToWrite + h[endOffset * 2:]

    # Write to Save Name
    def writeToPositionName(self, value, startOffset, endOffset, type):
        global h
        valueToWrite = value.encode("utf-8").hex()
        h = h[:startOffset * 2] + str(valueToWrite).encode('ascii') + h[endOffset * 2:]

if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle("fusion")
    if (sys.platform.startswith('linux')):
        font = app.font()
        font.setPointSize(9)
        app.setFont(font)
    ex = PersonaApp()
    sys.exit(app.exec_())
